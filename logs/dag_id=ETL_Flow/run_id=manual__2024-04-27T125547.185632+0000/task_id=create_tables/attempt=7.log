[2024-04-27T13:46:42.793+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.create_tables manual__2024-04-27T12:55:47.185632+00:00 [queued]>
[2024-04-27T13:46:42.831+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.create_tables manual__2024-04-27T12:55:47.185632+00:00 [queued]>
[2024-04-27T13:46:42.833+0000] {taskinstance.py:2193} INFO - Starting attempt 7 of 12
[2024-04-27T13:46:42.878+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): create_tables> on 2024-04-27 12:55:47.185632+00:00
[2024-04-27T13:46:42.892+0000] {standard_task_runner.py:60} INFO - Started process 7324 to run task
[2024-04-27T13:46:42.901+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'create_tables', 'manual__2024-04-27T12:55:47.185632+00:00', '--job-id', '2756', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpfgjl8ws5']
[2024-04-27T13:46:42.910+0000] {standard_task_runner.py:88} INFO - Job 2756: Subtask create_tables
[2024-04-27T13:46:43.059+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.create_tables manual__2024-04-27T12:55:47.185632+00:00 [running]> on host d838c4eb4dcc
[2024-04-27T13:46:45.535+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='create_tables' AIRFLOW_CTX_EXECUTION_DATE='2024-04-27T12:55:47.185632+00:00' AIRFLOW_CTX_TRY_NUMBER='7' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-04-27T12:55:47.185632+00:00'
[2024-04-27T13:46:45.539+0000] {sql.py:276} INFO - Executing: 


CREATE TABLE IF NOT EXISTS MRR_Dim_Customers(
Customer_ID             varchar(50) null,
country             varchar(50) null,
currency            varchar(50) null,
exchange_to_usd     varchar(50) null,
installation_date   varchar(50) null,
media_source        varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS MRR_Dim_Products(
product_ID          varchar(50) null,
product_name        varchar(50) null,
supplier            varchar(50) null,
category            varchar(50) null,
unit_price          varchar(50) null,
unit_cost           varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS  MRR_Fact_Details(
order_ID            varchar(50) null,
product_ID          varchar(50) null,
quantity            varchar(50) null
);

CREATE TABLE IF NOT EXISTS  MRR_Fact_Orders(
order_ID            varchar(50) null,
order_time          varchar(50) null,
customer_ID         varchar(50) null,
coupon_discount     varchar(50) null
);

CREATE TABLE IF NOT EXISTS MRR_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
customer_ID	        int	        not null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Customers(
Customer_ID	            int	    not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2)not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
isValid	            varchar(50)	not null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Dates(
date	date	not null,
year	Int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null
);

CREATE TABLE IF NOT EXISTS STG_Dim_Products(
product_ID	    int	not         null,
product_name	varchar(50)	    not null,
supplier	    int	            not null,
category	    int	            not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
isValid	        varchar(10)	    not null
);

CREATE TABLE IF NOT EXISTS STG_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null
);


CREATE TABLE IF NOT EXISTS  STG_Fact_Details(
order_ID	int	not null,
product_ID	int	not null,
quantity	int	not null
);

CREATE TABLE IF NOT EXISTS  STG_Fact_Orders(
order_ID	    int	         not null,
order_time	    timestamp    not null,
customer_ID	    int	         not null,
coupon_discount	decimal(3,2) not null,
);

CREATE TABLE IF NOT EXISTS STG_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
customer_ID	        int	        not null
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Customers(
DW_customer_ID	    serial	    not null,
Customer_ID	        int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS  DWH_Dim_Dates(
date	date	not null,
year	int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order(
order_ID	            int	            not null,
DW_product_ID	        int	            not null,
DW_customer_ID	        int	            not null,
order_time	            timestamp	    not null,
country	                varchar(50)	    not null,
currency	            varchar(50)	    not null,
exchange_to_USD	        decimal(3,2)    not null,
installation_date	    date	        not null,
media_source	        varchar(50)	    not null,
supplier	            int	            not null,
category	            int	            not null,
quantity	            int	                null,
total_price_before_discount  decimal(15,5)  not null,
total_cost	            decimal(15,5)   not null,
incremental_discount    decimal(3,2)    not null,
total_price_after_discount	 decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (dateTime )
);

CREATE TABLE IF NOT EXISTS DWH_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
DW_customer_ID	    int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_USD	    decimal(3,2)not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
PRIMARY KEY (event_ID)
);

--Summary tables 

CREATE TABLE IF NOT EXISTS Daily_Customers_Transactions(
DW_customer_ID	        int	        not null,
date	                date	    not null,
country	                varchar(50)	not null,
media_source	        varchar(50)	not null,
installation_date       date        not null,
last_seen 	            date	    not null,
days_since_installation	date	    not null,
days_since_last_seen	date	    not null,
engagement_status	    varchar(50)	not null,
PRIMARY KEY (DW_customer_ID, date)
);

CREATE TABLE IF NOT EXISTS Daily_Purchase_Agg(
DW_customer_ID	    int	            not null,
order_date	        date 	        not null,
country	            varchar(50)	    not null,
supplier	        int	            not null,
category	        int	            not null,
media_source	    varchar(50)	    not null,
total_cost	        decimal(15,5)	not null,
total_purchase_USD	decimal(15,5)	not null,
PRIMARY KEY (DW_customer_ID, order_date)
);

CREATE TABLE IF NOT EXISTS Daily_Event_Agg(
event_description	varchar(50)	not null,
event_date	        date 	    not null,
country	            varchar(50)	not null,
media_source	    varchar(50)	not null,
count 	            int	        not null,
PRIMARY KEY (event_description, event_date)
);

CREATE TABLE IF NOT EXISTS Monthly_Product_Rank(
DW_product_ID	            serial	    not null,
first_day_of_month	        date 	    not null,
category	                int	        not null,
popularity_percent_rank 	int	        not null,
profitabilty_percent_rank	int	        not null,
PRIMARY KEY (DW_product_ID, first_day_of_month)
);

CREATE TABLE IF NOT EXISTS Monthly_Supplier_Rank(
category	                int	 not null,
first_day_of_month	        date not null,
supplier 	                int	 not null,
popularity_percent_rank 	int	 not null,
profitabilty_percent_rank	int	 not null,
PRIMARY KEY (category, first_day_of_month)
);

--backup

CREATE TABLE IF NOT EXISTS DWH_Dim_Customers_backup(
DW_customer_ID	    serial	    not null,
Customer_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products_backup(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order_backup(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);

CREATE TABLE IF NOT EXISTS DWH_Fact_Events_backup(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
DW_customer_ID	    int	        not null,
PRIMARY KEY (event_ID)
);

CREATE TABLE IF NOT EXISTS Daily_Customers_Transactions_backup(
DW_customer_ID	        int	        not null,
date	                date	    not null,
country	                varchar(50)	not null,
media_source	        varchar(50)	not null,
installation_date       date        not null,
last_seen 	            date	    not null,
days_since_installation	date	    not null,
days_since_last_seen	date	    not null,
engagement_status	    varchar(50) not null,
PRIMARY KEY (DW_customer_ID, date)
);

CREATE TABLE IF NOT EXISTS Daily_Purchase_Agg_backup(
DW_customer_ID	    int	            not null,
order_date	        date 	        not null,
country	            varchar(50)	    not null,
supplier	        int	            not null,
category	        int	            not null,
media_source	    varchar(50)	    not null,
total_cost	        decimal(15,5)	not null,
total_purchase_USD	decimal(15,5)	not null,
PRIMARY KEY (DW_customer_ID, order_date)
);

CREATE TABLE IF NOT EXISTS Daily_Event_Agg_backup(
event_description	varchar(50)	not null,
event_date	        date 	    not null,
country	            varchar(50)	not null,
media_source	    varchar(50)	not null,
count 	            int	        not null,
PRIMARY KEY (event_description, event_date)
);

CREATE TABLE IF NOT EXISTS Monthly_Product_Rank_backup(
DW_product_ID	            serial	    not null,
first_day_of_month	        date 	    not null,
category	                int	        not null,
popularity_percent_rank 	int	        not null,
profitabilty_percent_rank	int	        not null,
PRIMARY KEY (DW_product_ID, first_day_of_month)
);

CREATE TABLE IF NOT EXISTS Monthly_Supplier_Rank_backup(
category	                int	 not null,
first_day_of_month	        date not null,
supplier 	                int	 not null,
popularity_percent_rank 	int	 not null,
profitabilty_percent_rank	int	 not null,
PRIMARY KEY (category, first_day_of_month)
);
[2024-04-27T13:46:45.573+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-27T13:46:45.601+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-27T13:46:45.661+0000] {sql.py:457} INFO - Running statement: 


CREATE TABLE IF NOT EXISTS MRR_Dim_Customers(
Customer_ID             varchar(50) null,
country             varchar(50) null,
currency            varchar(50) null,
exchange_to_usd     varchar(50) null,
installation_date   varchar(50) null,
media_source        varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS MRR_Dim_Products(
product_ID          varchar(50) null,
product_name        varchar(50) null,
supplier            varchar(50) null,
category            varchar(50) null,
unit_price          varchar(50) null,
unit_cost           varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS  MRR_Fact_Details(
order_ID            varchar(50) null,
product_ID          varchar(50) null,
quantity            varchar(50) null
);

CREATE TABLE IF NOT EXISTS  MRR_Fact_Orders(
order_ID            varchar(50) null,
order_time          varchar(50) null,
customer_ID         varchar(50) null,
coupon_discount     varchar(50) null
);

CREATE TABLE IF NOT EXISTS MRR_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
customer_ID	        int	        not null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Customers(
Customer_ID	            int	    not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2)not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
isValid	            varchar(50)	not null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Dates(
date	date	not null,
year	Int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null
);

CREATE TABLE IF NOT EXISTS STG_Dim_Products(
product_ID	    int	not         null,
product_name	varchar(50)	    not null,
supplier	    int	            not null,
category	    int	            not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
isValid	        varchar(10)	    not null
);

CREATE TABLE IF NOT EXISTS STG_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null
);


CREATE TABLE IF NOT EXISTS  STG_Fact_Details(
order_ID	int	not null,
product_ID	int	not null,
quantity	int	not null
);

CREATE TABLE IF NOT EXISTS  STG_Fact_Orders(
order_ID	    int	         not null,
order_time	    timestamp    not null,
customer_ID	    int	         not null,
coupon_discount	decimal(3,2) not null,
);

CREATE TABLE IF NOT EXISTS STG_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
customer_ID	        int	        not null
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Customers(
DW_customer_ID	    serial	    not null,
Customer_ID	        int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS  DWH_Dim_Dates(
date	date	not null,
year	int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order(
order_ID	            int	            not null,
DW_product_ID	        int	            not null,
DW_customer_ID	        int	            not null,
order_time	            timestamp	    not null,
country	                varchar(50)	    not null,
currency	            varchar(50)	    not null,
exchange_to_USD	        decimal(3,2)    not null,
installation_date	    date	        not null,
media_source	        varchar(50)	    not null,
supplier	            int	            not null,
category	            int	            not null,
quantity	            int	                null,
total_price_before_discount  decimal(15,5)  not null,
total_cost	            decimal(15,5)   not null,
incremental_discount    decimal(3,2)    not null,
total_price_after_discount	 decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (dateTime )
);

CREATE TABLE IF NOT EXISTS DWH_Fact_Events(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
DW_customer_ID	    int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_USD	    decimal(3,2)not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
PRIMARY KEY (event_ID)
);

--Summary tables 

CREATE TABLE IF NOT EXISTS Daily_Customers_Transactions(
DW_customer_ID	        int	        not null,
date	                date	    not null,
country	                varchar(50)	not null,
media_source	        varchar(50)	not null,
installation_date       date        not null,
last_seen 	            date	    not null,
days_since_installation	date	    not null,
days_since_last_seen	date	    not null,
engagement_status	    varchar(50)	not null,
PRIMARY KEY (DW_customer_ID, date)
);

CREATE TABLE IF NOT EXISTS Daily_Purchase_Agg(
DW_customer_ID	    int	            not null,
order_date	        date 	        not null,
country	            varchar(50)	    not null,
supplier	        int	            not null,
category	        int	            not null,
media_source	    varchar(50)	    not null,
total_cost	        decimal(15,5)	not null,
total_purchase_USD	decimal(15,5)	not null,
PRIMARY KEY (DW_customer_ID, order_date)
);

CREATE TABLE IF NOT EXISTS Daily_Event_Agg(
event_description	varchar(50)	not null,
event_date	        date 	    not null,
country	            varchar(50)	not null,
media_source	    varchar(50)	not null,
count 	            int	        not null,
PRIMARY KEY (event_description, event_date)
);

CREATE TABLE IF NOT EXISTS Monthly_Product_Rank(
DW_product_ID	            serial	    not null,
first_day_of_month	        date 	    not null,
category	                int	        not null,
popularity_percent_rank 	int	        not null,
profitabilty_percent_rank	int	        not null,
PRIMARY KEY (DW_product_ID, first_day_of_month)
);

CREATE TABLE IF NOT EXISTS Monthly_Supplier_Rank(
category	                int	 not null,
first_day_of_month	        date not null,
supplier 	                int	 not null,
popularity_percent_rank 	int	 not null,
profitabilty_percent_rank	int	 not null,
PRIMARY KEY (category, first_day_of_month)
);

--backup

CREATE TABLE IF NOT EXISTS DWH_Dim_Customers_backup(
DW_customer_ID	    serial	    not null,
Customer_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products_backup(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order_backup(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);

CREATE TABLE IF NOT EXISTS DWH_Fact_Events_backup(
event_ID	        int	        not null,
event_description	varchar(50)	not null,
event_time	        timestamp	not null,
DW_customer_ID	    int	        not null,
PRIMARY KEY (event_ID)
);

CREATE TABLE IF NOT EXISTS Daily_Customers_Transactions_backup(
DW_customer_ID	        int	        not null,
date	                date	    not null,
country	                varchar(50)	not null,
media_source	        varchar(50)	not null,
installation_date       date        not null,
last_seen 	            date	    not null,
days_since_installation	date	    not null,
days_since_last_seen	date	    not null,
engagement_status	    varchar(50) not null,
PRIMARY KEY (DW_customer_ID, date)
);

CREATE TABLE IF NOT EXISTS Daily_Purchase_Agg_backup(
DW_customer_ID	    int	            not null,
order_date	        date 	        not null,
country	            varchar(50)	    not null,
supplier	        int	            not null,
category	        int	            not null,
media_source	    varchar(50)	    not null,
total_cost	        decimal(15,5)	not null,
total_purchase_USD	decimal(15,5)	not null,
PRIMARY KEY (DW_customer_ID, order_date)
);

CREATE TABLE IF NOT EXISTS Daily_Event_Agg_backup(
event_description	varchar(50)	not null,
event_date	        date 	    not null,
country	            varchar(50)	not null,
media_source	    varchar(50)	not null,
count 	            int	        not null,
PRIMARY KEY (event_description, event_date)
);

CREATE TABLE IF NOT EXISTS Monthly_Product_Rank_backup(
DW_product_ID	            serial	    not null,
first_day_of_month	        date 	    not null,
category	                int	        not null,
popularity_percent_rank 	int	        not null,
profitabilty_percent_rank	int	        not null,
PRIMARY KEY (DW_product_ID, first_day_of_month)
);

CREATE TABLE IF NOT EXISTS Monthly_Supplier_Rank_backup(
category	                int	 not null,
first_day_of_month	        date not null,
supplier 	                int	 not null,
popularity_percent_rank 	int	 not null,
profitabilty_percent_rank	int	 not null,
PRIMARY KEY (category, first_day_of_month)
);, parameters: None
[2024-04-27T13:46:45.689+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.SyntaxError: syntax error at or near ")"
LINE 92: );
         ^

[2024-04-27T13:46:45.763+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=create_tables, execution_date=20240427T125547, start_date=20240427T134642, end_date=20240427T134645
[2024-04-27T13:46:50.464+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2756 for task create_tables (syntax error at or near ")"
LINE 92: );
         ^
; 7324)
[2024-04-27T13:46:50.501+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-04-27T13:46:50.537+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-04-27T13:46:51.240+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
