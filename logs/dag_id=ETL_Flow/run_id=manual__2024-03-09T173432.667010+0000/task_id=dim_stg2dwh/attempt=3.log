[2024-03-12T17:38:47.110+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh manual__2024-03-09T17:34:32.667010+00:00 [queued]>
[2024-03-12T17:38:47.218+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh manual__2024-03-09T17:34:32.667010+00:00 [queued]>
[2024-03-12T17:38:47.224+0000] {taskinstance.py:2193} INFO - Starting attempt 3 of 6
[2024-03-12T17:38:47.714+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_stg2dwh> on 2024-03-09 17:34:32.667010+00:00
[2024-03-12T17:38:47.756+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_stg2dwh', 'manual__2024-03-09T17:34:32.667010+00:00', '--job-id', '607', '--raw', '--subdir', 'DAGS_FOLDER/etl2.py', '--cfg-path', '/tmp/tmp_fvircsw']
[2024-03-12T17:38:47.773+0000] {standard_task_runner.py:88} INFO - Job 607: Subtask dim_stg2dwh
[2024-03-12T17:38:47.739+0000] {standard_task_runner.py:60} INFO - Started process 649 to run task
[2024-03-12T17:38:48.738+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_stg2dwh manual__2024-03-09T17:34:32.667010+00:00 [running]> on host e2878ba2ad26
[2024-03-12T17:38:49.562+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_stg2dwh' AIRFLOW_CTX_EXECUTION_DATE='2024-03-09T17:34:32.667010+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-03-09T17:34:32.667010+00:00'
[2024-03-12T17:38:49.583+0000] {sql.py:276} INFO - Executing: truncate table STG_Dim_Dates;
truncate table STG_Dim_Time;

insert into DWH_Dim_Dates
select * 
from STG_Dim_Dates;

insert into DWH_Dim_Time
select * 
from STG_Dim_Time;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers
select c.*, current_date, ''
from STG_Dim_Customers c
where Customer_ID not in 
                            (
                              select distinct Customer_ID
                              from DWH_Dim_Customers       
                            );
--update the valid until date of customers who moved to another city/country
update DWH_Dim_Customers
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
    where s.City <> d.City or s.Country <> d.Country
    ) src
where Customer_ID=src.Customer_ID and Valid_Until is null

--insert records of customers who moved to another city/country                             
insert into DWH_Dim_Customers
select *
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.City <> d.City or s.Country <> d.Country 

---products

--insert all the new products records 
insert into DWH_Dim_Products
select *
from STG_Dim_Products 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
--update the valid until date of products that their price/cost/supplier changed
update DWH_Dim_Products
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
    where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier
    ) src
where Product_ID=src.Product_ID and Valid_Until is null

--insert records of products that their price/cost/supplier changed                             
insert into DWH_Dim_Products
select *
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier

---employees

--insert all the new employees records 
insert into DWH_Dim_Employees
select *
from STG_Dim_Employees 
where Employee_ID not in 
                            (
                              select distinct Employee_ID
                              from DWH_Dim_Employees       
                            );
--update the valid until date of employees that their salary/title/manager/office changed
update DWH_Dim_Employees
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Products s inner join DWH_Dim_Employees d on d.Employee_ID = s.Employee_ID
    where s.Reports_To <> d.Reports_To or s.title <> d.title or 
          s.Month_Salary <> d.Month_Salary or s.office <> d.office
    ) src
where Employee_ID=src.Employee_ID and Valid_Until is null

--insert records of products that their price/cost/supplier changed                             
insert into DWH_Dim_Employees
select *
from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID=s.Employee_ID
where s.Reports_To <> d.Reports_To or s.title <> d.title or 
      s.Month_Salary <> d.Month_Salary or s.office <> d.office


[2024-03-12T17:38:49.713+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-12T17:38:49.872+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-12T17:38:50.067+0000] {sql.py:457} INFO - Running statement: truncate table STG_Dim_Dates;
truncate table STG_Dim_Time;

insert into DWH_Dim_Dates
select * 
from STG_Dim_Dates;

insert into DWH_Dim_Time
select * 
from STG_Dim_Time;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers
select c.*, current_date, ''
from STG_Dim_Customers c
where Customer_ID not in 
                            (
                              select distinct Customer_ID
                              from DWH_Dim_Customers       
                            );
--update the valid until date of customers who moved to another city/country
update DWH_Dim_Customers
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
    where s.City <> d.City or s.Country <> d.Country
    ) src
where Customer_ID=src.Customer_ID and Valid_Until is null

--insert records of customers who moved to another city/country                             
insert into DWH_Dim_Customers
select *
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.City <> d.City or s.Country <> d.Country 

---products

--insert all the new products records 
insert into DWH_Dim_Products
select *
from STG_Dim_Products 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
--update the valid until date of products that their price/cost/supplier changed
update DWH_Dim_Products
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
    where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier
    ) src
where Product_ID=src.Product_ID and Valid_Until is null

--insert records of products that their price/cost/supplier changed                             
insert into DWH_Dim_Products
select *
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier

---employees

--insert all the new employees records 
insert into DWH_Dim_Employees
select *
from STG_Dim_Employees 
where Employee_ID not in 
                            (
                              select distinct Employee_ID
                              from DWH_Dim_Employees       
                            );
--update the valid until date of employees that their salary/title/manager/office changed
update DWH_Dim_Employees
set Valid_Until=current_date
from 
    (
    select *
    from STG_Dim_Products s inner join DWH_Dim_Employees d on d.Employee_ID = s.Employee_ID
    where s.Reports_To <> d.Reports_To or s.title <> d.title or 
          s.Month_Salary <> d.Month_Salary or s.office <> d.office
    ) src
where Employee_ID=src.Employee_ID and Valid_Until is null

--insert records of products that their price/cost/supplier changed                             
insert into DWH_Dim_Employees
select *
from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID=s.Employee_ID
where s.Reports_To <> d.Reports_To or s.title <> d.title or 
      s.Month_Salary <> d.Month_Salary or s.office <> d.office

, parameters: None
[2024-03-12T17:38:50.121+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.SyntaxError: syntax error at or near "insert"
LINE 34: insert into DWH_Dim_Customers
         ^

[2024-03-12T17:38:50.249+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=dim_stg2dwh, execution_date=20240309T173432, start_date=20240312T173847, end_date=20240312T173850
[2024-03-12T17:38:50.454+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 607 for task dim_stg2dwh (syntax error at or near "insert"
LINE 34: insert into DWH_Dim_Customers
         ^
; 649)
[2024-03-12T17:38:50.611+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-12T17:38:50.833+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
