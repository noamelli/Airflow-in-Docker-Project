[2024-03-18T19:37:01.485+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-18T19:26:33.860279+00:00 [queued]>
[2024-03-18T19:37:01.514+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-18T19:26:33.860279+00:00 [queued]>
[2024-03-18T19:37:01.516+0000] {taskinstance.py:2193} INFO - Starting attempt 2 of 6
[2024-03-18T19:37:01.655+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-18 19:26:33.860279+00:00
[2024-03-18T19:37:01.682+0000] {standard_task_runner.py:60} INFO - Started process 2820 to run task
[2024-03-18T19:37:01.708+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'manual__2024-03-18T19:26:33.860279+00:00', '--job-id', '1904', '--raw', '--subdir', 'DAGS_FOLDER/etl2.py', '--cfg-path', '/tmp/tmpxlnsbl2g']
[2024-03-18T19:37:01.722+0000] {standard_task_runner.py:88} INFO - Job 1904: Subtask snapshot
[2024-03-18T19:37:02.106+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot manual__2024-03-18T19:26:33.860279+00:00 [running]> on host b4ee6ab26675
[2024-03-18T19:37:02.847+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-18T19:26:33.860279+00:00' AIRFLOW_CTX_TRY_NUMBER='2' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-03-18T19:26:33.860279+00:00'
[2024-03-18T19:37:02.850+0000] {sql.py:276} INFO - Executing: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;


--cross join is fine beacuse the view consists of one record- the crrent date 
--     CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
--     SELECT DISTINCT 
--         cd.StartOfPrevMonth,
--         c.DW_Customer_ID,
--         CASE 
        --     WHEN EXISTS (
        --         SELECT 1
        --         FROM DWH_Dim_Customers u
        --         WHERE u.Customer_ID = c.Customer_ID
        --         GROUP BY u.Customer_ID
        --         HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
        --         AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
        --     ) THEN 'new'
        --     WHEN NOT EXISTS (
        --         SELECT 1
        --         FROM DWH_Fact_Product_In_Order p
        --         WHERE p.DW_Customer_ID = c.DW_Customer_ID 
        --             AND DATE(Order_Time) <= EndOfPrevMonth
        --             AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
        --     ) THEN 'abandoned'
        --     WHEN EXISTS (
        --         SELECT 1
        --         FROM Snapshot_Customers_Transactions_Arch s
        --         WHERE s.DW_Customer_ID = c.DW_Customer_ID 
        --             AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) --- INTERVAL '1 month'
        --             AND status ='abandoned' 
        --     ) THEN'BLBB'
        --      AND EXISTS (
        --         SELECT 1
        --         FROM DWH_Fact_Product_In_Order p
        --         WHERE p.DW_Customer_ID = c.DW_Customer_ID 
        --         AND DATE(Order_Time) <= cd.EndOfPrevMonth
        --         AND DATE(Order_Time) >= cd.StartOfPrevMonth
        --     ) THEN 'reactivated' 
--             ELSE 'regular' 
--         END AS Status
--     FROM DWH_Dim_Customers c 
--     CROSS JOIN Dates cd
--     WHERE c.Valid_Until IS NULL; 
    
    -- null cause we dont care about not null they belong to prev months 

--     IF (SELECT MAX(s.StartOfMonth) 
--         FROM Snapshot_Customers_Transactions_Arch s) 
--          < 
--         (SELECT StartOfPrevMonth
--         FROM Dates
--         ) 
        
--         THEN 

--         -- Adding the new records to the archive table - incremental load 
--         --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
--         INSERT INTO Snapshot_Customers_Transactions_Arch (DW_Customer_ID, StartOfMonth, Status)
--         SELECT 
--             DW_Customer_ID,
--             StartOfPrevMonth,
--             Status 
--         FROM Snapshot_Customers_Transactions_month t
--         WHERE (StartOfPrevMonth, DW_Customer_ID, Status) NOT IN ( 
--             SELECT StartOfPrevMonth, DW_Customer_ID, Status
--             FROM Snapshot_Customers_Transactions_Arch a
--         );

--         INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
--                                                          Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
--         SELECT 
--             PrevPeriodYear,
--             PrevPeriodQuarter,
--             PrevPeriodMonth,
--             C.Country, 
--             C.City,
--             SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
--             SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
--             SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
--             SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
--             COUNT(DISTINCT DW_Customer_ID) Count_Total
--         FROM Snapshot_Customers_Transactions_Arch A 
--         JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
--         GROUP BY 
--             PrevPeriodYear,
--             PrevPeriodQuarter,
--             PrevPeriodMonth,
--             C.Country, 
--             C.City;
--     ELSE
--         RAISE NOTICE 'No records found for archiving.';
--     END IF;


[2024-03-18T19:37:02.879+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-18T19:37:02.903+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-18T19:37:02.934+0000] {sql.py:457} INFO - Running statement: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;


--cross join is fine beacuse the view consists of one record- the crrent date 
--     CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
--     SELECT DISTINCT 
--         cd.StartOfPrevMonth,
--         c.DW_Customer_ID,
--         CASE 
        --     WHEN EXISTS (
        --         SELECT 1
        --         FROM DWH_Dim_Customers u
        --         WHERE u.Customer_ID = c.Customer_ID
        --         GROUP BY u.Customer_ID
        --         HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
        --         AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
        --     ) THEN 'new'
        --     WHEN NOT EXISTS (
        --         SELECT 1
        --         FROM DWH_Fact_Product_In_Order p
        --         WHERE p.DW_Customer_ID = c.DW_Customer_ID 
        --             AND DATE(Order_Time) <= EndOfPrevMonth
        --             AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
        --     ) THEN 'abandoned'
        --     WHEN EXISTS (
        --         SELECT 1
        --         FROM Snapshot_Customers_Transactions_Arch s
        --         WHERE s.DW_Customer_ID = c.DW_Customer_ID 
        --             AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) --- INTERVAL '1 month'
        --             AND status ='abandoned' 
        --     ) THEN'BLBB'
        --      AND EXISTS (
        --         SELECT 1
        --         FROM DWH_Fact_Product_In_Order p
        --         WHERE p.DW_Customer_ID = c.DW_Customer_ID 
        --         AND DATE(Order_Time) <= cd.EndOfPrevMonth
        --         AND DATE(Order_Time) >= cd.StartOfPrevMonth
        --     ) THEN 'reactivated' 
--             ELSE 'regular' 
--         END AS Status
--     FROM DWH_Dim_Customers c 
--     CROSS JOIN Dates cd
--     WHERE c.Valid_Until IS NULL; 
    
    -- null cause we dont care about not null they belong to prev months 

--     IF (SELECT MAX(s.StartOfMonth) 
--         FROM Snapshot_Customers_Transactions_Arch s) 
--          < 
--         (SELECT StartOfPrevMonth
--         FROM Dates
--         ) 
        
--         THEN 

--         -- Adding the new records to the archive table - incremental load 
--         --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
--         INSERT INTO Snapshot_Customers_Transactions_Arch (DW_Customer_ID, StartOfMonth, Status)
--         SELECT 
--             DW_Customer_ID,
--             StartOfPrevMonth,
--             Status 
--         FROM Snapshot_Customers_Transactions_month t
--         WHERE (StartOfPrevMonth, DW_Customer_ID, Status) NOT IN ( 
--             SELECT StartOfPrevMonth, DW_Customer_ID, Status
--             FROM Snapshot_Customers_Transactions_Arch a
--         );

--         INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
--                                                          Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
--         SELECT 
--             PrevPeriodYear,
--             PrevPeriodQuarter,
--             PrevPeriodMonth,
--             C.Country, 
--             C.City,
--             SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
--             SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
--             SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
--             SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
--             COUNT(DISTINCT DW_Customer_ID) Count_Total
--         FROM Snapshot_Customers_Transactions_Arch A 
--         JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
--         GROUP BY 
--             PrevPeriodYear,
--             PrevPeriodQuarter,
--             PrevPeriodMonth,
--             C.Country, 
--             C.City;
--     ELSE
--         RAISE NOTICE 'No records found for archiving.';
--     END IF;

, parameters: None
[2024-03-18T19:37:02.954+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-03-18T19:37:02.990+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240318T192633, start_date=20240318T193701, end_date=20240318T193702
[2024-03-18T19:37:03.059+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-03-18T19:37:03.160+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
