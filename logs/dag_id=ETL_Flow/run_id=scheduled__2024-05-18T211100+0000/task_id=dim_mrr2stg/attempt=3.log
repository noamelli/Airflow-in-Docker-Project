[2024-05-20T08:39:26.526+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-05-18T21:11:00+00:00 [queued]>
[2024-05-20T08:39:26.565+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-05-18T21:11:00+00:00 [queued]>
[2024-05-20T08:39:26.566+0000] {taskinstance.py:2193} INFO - Starting attempt 3 of 6
[2024-05-20T08:39:26.612+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_mrr2stg> on 2024-05-18 21:11:00+00:00
[2024-05-20T08:39:26.625+0000] {standard_task_runner.py:60} INFO - Started process 18681 to run task
[2024-05-20T08:39:26.633+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_mrr2stg', 'scheduled__2024-05-18T21:11:00+00:00', '--job-id', '3553', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpw0pg99fa']
[2024-05-20T08:39:26.659+0000] {standard_task_runner.py:88} INFO - Job 3553: Subtask dim_mrr2stg
[2024-05-20T08:39:27.787+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-05-18T21:11:00+00:00 [running]> on host 518f7ecc027f
[2024-05-20T08:39:37.001+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_mrr2stg' AIRFLOW_CTX_EXECUTION_DATE='2024-05-18T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-18T21:11:00+00:00'
[2024-05-20T08:39:37.004+0000] {sql.py:276} INFO - Executing: truncate table STG_Dim_Customers;
truncate table STG_Dim_Products;
truncate table STG_Dim_Dates;
truncate table STG_Dim_Time;

insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost,isValid)
select 
cast(Product_ID as integer),
case when Product_Name is null then 'missing' else Product_Name end,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
     then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
     then cast(Unit_Cost as decimal(15,5)) else null end,
isValid
from MRR_Dim_Products
where isValid='valid';

insert into STG_Dim_Customers(Customer_ID,country,currency,exchange_to_USD,installation_date,media_source,isValid)
select
cast(Customer_ID as integer),
case when country is null then 'missing' else country end,
case when currency is null then 'missing' else currency end,
case when exchange_to_USD similar to '[0-9]+(\.[0-9]+)?' and cast(exchange_to_USD as decimal(3,2))>=0
     then cast(exchange_to_USD as decimal(3,2)) else null end,
case
    -- YYYY-MM-DD
    when installation_date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(installation_date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when installation_date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(installation_date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when installation_date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(installation_date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when installation_date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(installation_date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when installation_date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(installation_date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when installation_date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(installation_date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when installation_date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(installation_date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when installation_date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(installation_date, 'YYYY\MM\DD')
    else '1900-01-01' end,
    media_source,
    isValid 
from MRR_Dim_Customers
where isValid='valid';


insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2024-01-01'::date, CURRENT_DATE + interval '12 days', interval '1 day');


INSERT INTO STG_Dim_Time(DateTime, Date, Hour, Minute)
SELECT
generate_series AS DateTime,
date_trunc('hour', generate_series) AS Date,
extract (HOUR FROM generate_series) AS Hour,
extract(MINUTE FROM generate_series) AS Minute
from
  generate_series('2024-01-01'::TIMESTAMP, CURRENT_DATE + INTERVAL '12 days', INTERVAL '1 minute');

[2024-05-20T08:39:37.034+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-20T08:39:37.070+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-20T08:39:37.326+0000] {sql.py:457} INFO - Running statement: truncate table STG_Dim_Customers;
truncate table STG_Dim_Products;
truncate table STG_Dim_Dates;
truncate table STG_Dim_Time;

insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost,isValid)
select 
cast(Product_ID as integer),
case when Product_Name is null then 'missing' else Product_Name end,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
     then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
     then cast(Unit_Cost as decimal(15,5)) else null end,
isValid
from MRR_Dim_Products
where isValid='valid';

insert into STG_Dim_Customers(Customer_ID,country,currency,exchange_to_USD,installation_date,media_source,isValid)
select
cast(Customer_ID as integer),
case when country is null then 'missing' else country end,
case when currency is null then 'missing' else currency end,
case when exchange_to_USD similar to '[0-9]+(\.[0-9]+)?' and cast(exchange_to_USD as decimal(3,2))>=0
     then cast(exchange_to_USD as decimal(3,2)) else null end,
case
    -- YYYY-MM-DD
    when installation_date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(installation_date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when installation_date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(installation_date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when installation_date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(installation_date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when installation_date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(installation_date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when installation_date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(installation_date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when installation_date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(installation_date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when installation_date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(installation_date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when installation_date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(installation_date, 'YYYY\MM\DD')
    else '1900-01-01' end,
    media_source,
    isValid 
from MRR_Dim_Customers
where isValid='valid';


insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2024-01-01'::date, CURRENT_DATE + interval '12 days', interval '1 day');


INSERT INTO STG_Dim_Time(DateTime, Date, Hour, Minute)
SELECT
generate_series AS DateTime,
date_trunc('hour', generate_series) AS Date,
extract (HOUR FROM generate_series) AS Hour,
extract(MINUTE FROM generate_series) AS Minute
from
  generate_series('2024-01-01'::TIMESTAMP, CURRENT_DATE + INTERVAL '12 days', INTERVAL '1 minute');
, parameters: None
[2024-05-20T10:16:20.918+0000] {local_task_job_runner.py:211} ERROR - Heartbeat time limit exceeded!
[2024-05-20T10:16:30.020+0000] {process_utils.py:131} INFO - Sending 15 to group 18681. PIDs of all processes in the group: [18681]
[2024-05-20T10:16:30.131+0000] {process_utils.py:86} INFO - Sending the signal 15 to group 18681
[2024-05-20T10:17:56.436+0000] {process_utils.py:149} WARNING - process psutil.Process(pid=18681, name='airflow task ru', status='sleeping', started='08:39:26') did not respond to SIGTERM. Trying SIGKILL
[2024-05-20T10:17:56.987+0000] {process_utils.py:86} INFO - Sending the signal 9 to group 18681
[2024-05-20T10:17:57.095+0000] {process_utils.py:79} INFO - Process psutil.Process(pid=18681, name='airflow task ru', status='terminated', exitcode=<Negsignal.SIGKILL: -9>, started='08:39:26') (18681) terminated with exit code -9
[2024-05-20T10:17:57.110+0000] {standard_task_runner.py:175} ERROR - Job 3553 was killed before it finished (likely due to running out of memory)
