[2024-05-06T15:29:31.303+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-05-03T21:11:00+00:00 [queued]>
[2024-05-06T15:29:31.316+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-05-03T21:11:00+00:00 [queued]>
[2024-05-06T15:29:31.317+0000] {taskinstance.py:2193} INFO - Starting attempt 3 of 6
[2024-05-06T15:29:31.337+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_stg2dwh> on 2024-05-03 21:11:00+00:00
[2024-05-06T15:29:31.344+0000] {standard_task_runner.py:60} INFO - Started process 11668 to run task
[2024-05-06T15:29:31.348+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_stg2dwh', 'scheduled__2024-05-03T21:11:00+00:00', '--job-id', '3348', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpfdln63aw']
[2024-05-06T15:29:31.352+0000] {standard_task_runner.py:88} INFO - Job 3348: Subtask dim_stg2dwh
[2024-05-06T15:29:31.414+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-05-03T21:11:00+00:00 [running]> on host 518f7ecc027f
[2024-05-06T15:29:31.951+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_stg2dwh' AIRFLOW_CTX_EXECUTION_DATE='2024-05-03T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-03T21:11:00+00:00'
[2024-05-06T15:29:31.953+0000] {sql.py:276} INFO - Executing: insert into DWH_Dim_Dates (Date,Year,Quarter,Month,Day)
select * 
from STG_Dim_Dates 
where date not in (
                    select distinct date 
                    from DWH_Dim_Dates
                  );

insert into DWH_Dim_Time (DateTime,Date,Hour,Minute)
select * 
from STG_Dim_Time
where DateTime not in (
                    select distinct DateTime 
                    from DWH_Dim_Time
                  );;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers (Customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select Customer_ID,country,currency,exchange_to_USD,installation_date,media_source
from STG_Dim_Customers  
where Customer_ID not in (
                          select distinct Customer_ID
                          from DWH_Dim_Customers
                          );



--update the valid until date of customers who moved to another country/their currency has changed 

update DWH_Dim_Customers
set Valid_Until=current_date
where DW_Customer_ID in (
                            select DW_Customer_ID 
                            from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
                            where (s.currency <> d.currency or s.Country <> d.Country or s.exchange_to_USD <> d.exchange_to_USD) and d.Valid_Until is null
                          );


--insert records of customers who moved to another country/their currency has changed                            
insert into DWH_Dim_Customers (Customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select s.Customer_ID,s.country,s.currency,s.exchange_to_USD,s.installation_date,s.media_source
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.currency <> d.currency or s.Country <> d.Country or s.exchange_to_USD <> d.exchange_to_USD;

--products

-- insert all the new products records 
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost
from STG_Dim_Products s 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
-- update the valid until date of products that their price/cost/supplier have changed
update DWH_Dim_Products
set Valid_Until=current_date
where dw_product_id in (
                            select dw_product_id 
                            from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
                            where (s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier) 
                            and d.Valid_Until is null
                          );



-- insert records of products that their price/cost/supplier have changed                             
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select s.Product_ID,s.Product_Name,s.Supplier,s.Category,s.Unit_Price,s.Unit_Cost
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier;

[2024-05-06T15:29:31.970+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-06T15:29:31.982+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-06T15:29:32.000+0000] {sql.py:457} INFO - Running statement: insert into DWH_Dim_Dates (Date,Year,Quarter,Month,Day)
select * 
from STG_Dim_Dates 
where date not in (
                    select distinct date 
                    from DWH_Dim_Dates
                  );

insert into DWH_Dim_Time (DateTime,Date,Hour,Minute)
select * 
from STG_Dim_Time
where DateTime not in (
                    select distinct DateTime 
                    from DWH_Dim_Time
                  );;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers (Customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select Customer_ID,country,currency,exchange_to_USD,installation_date,media_source
from STG_Dim_Customers  
where Customer_ID not in (
                          select distinct Customer_ID
                          from DWH_Dim_Customers
                          );



--update the valid until date of customers who moved to another country/their currency has changed 

update DWH_Dim_Customers
set Valid_Until=current_date
where DW_Customer_ID in (
                            select DW_Customer_ID 
                            from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
                            where (s.currency <> d.currency or s.Country <> d.Country or s.exchange_to_USD <> d.exchange_to_USD) and d.Valid_Until is null
                          );


--insert records of customers who moved to another country/their currency has changed                            
insert into DWH_Dim_Customers (Customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select s.Customer_ID,s.country,s.currency,s.exchange_to_USD,s.installation_date,s.media_source
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.currency <> d.currency or s.Country <> d.Country or s.exchange_to_USD <> d.exchange_to_USD;

--products

-- insert all the new products records 
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost
from STG_Dim_Products s 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
-- update the valid until date of products that their price/cost/supplier have changed
update DWH_Dim_Products
set Valid_Until=current_date
where dw_product_id in (
                            select dw_product_id 
                            from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
                            where (s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier) 
                            and d.Valid_Until is null
                          );



-- insert records of products that their price/cost/supplier have changed                             
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select s.Product_ID,s.Product_Name,s.Supplier,s.Category,s.Unit_Price,s.Unit_Cost
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier;
, parameters: None
[2024-05-06T16:43:35.063+0000] {sql.py:466} INFO - Rows affected: 0
[2024-05-06T16:43:35.310+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-05-06T16:43:35.851+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=dim_stg2dwh, execution_date=20240503T211100, start_date=20240506T152931, end_date=20240506T164335
[2024-05-06T16:43:36.164+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-05-06T16:43:42.482+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-05-06T16:43:42.539+0000] {taskinstance.py:3309} INFO - 1 downstream tasks scheduled from follow-on schedule check
