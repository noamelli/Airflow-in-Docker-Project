[2024-03-27T12:34:02.151+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-26T19:09:11.569740+00:00 [queued]>
[2024-03-27T12:34:02.176+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-26T19:09:11.569740+00:00 [queued]>
[2024-03-27T12:34:02.177+0000] {taskinstance.py:2193} INFO - Starting attempt 3 of 8
[2024-03-27T12:34:02.225+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-26 19:09:11.569740+00:00
[2024-03-27T12:34:02.239+0000] {standard_task_runner.py:60} INFO - Started process 5164 to run task
[2024-03-27T12:34:02.267+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'manual__2024-03-26T19:09:11.569740+00:00', '--job-id', '2302', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmphvwlhzci']
[2024-03-27T12:34:02.282+0000] {standard_task_runner.py:88} INFO - Job 2302: Subtask snapshot
[2024-03-27T12:34:02.661+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot manual__2024-03-26T19:09:11.569740+00:00 [running]> on host cb216a3a40e5
[2024-03-27T12:34:03.971+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-26T19:09:11.569740+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-03-26T19:09:11.569740+00:00'
[2024-03-27T12:34:03.973+0000] {sql.py:276} INFO - Executing: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
        --cross join beacuse the view consists of one record   
   

  DO $$
BEGIN   -- Loading to archive table and snapshot table only the previous month and load once only
IF (
    (SELECT MAX(StartOfMonth) FROM Snapshot_Customers_Transactions_Arch) <
   (SELECT StartOfPrevMonth FROM current_dates) 
   or (select count(*) from Snapshot_Customers_Transactions_Arch )= 0 
   )

THEN
        -- Adding the new records to the archive table - incremental loading
    INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
    SELECT 
        Customer_ID,
        StartOfPrevMonth,
        Status 
    FROM Snapshot_Customers_Transactions_month t
    WHERE (Customer_ID,StartOfPrevMonth,Status) NOT IN (SELECT Customer_ID,StartOfPrevMonth,Status FROM Snapshot_Customers_Transactions_Arch);
    
    
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City,
        SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
        COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City) 
    NOT IN (SELECT PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City;
ELSE
    RAISE NOTICE 'No records found for archiving.';
END IF;
END $$;
[2024-03-27T12:34:04.009+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-27T12:34:04.025+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-27T12:34:04.045+0000] {sql.py:457} INFO - Running statement: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
        --cross join beacuse the view consists of one record   
   

  DO $$
BEGIN   -- Loading to archive table and snapshot table only the previous month and load once only
IF (
    (SELECT MAX(StartOfMonth) FROM Snapshot_Customers_Transactions_Arch) <
   (SELECT StartOfPrevMonth FROM current_dates) 
   or (select count(*) from Snapshot_Customers_Transactions_Arch )= 0 
   )

THEN
        -- Adding the new records to the archive table - incremental loading
    INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
    SELECT 
        Customer_ID,
        StartOfPrevMonth,
        Status 
    FROM Snapshot_Customers_Transactions_month t
    WHERE (Customer_ID,StartOfPrevMonth,Status) NOT IN (SELECT Customer_ID,StartOfPrevMonth,Status FROM Snapshot_Customers_Transactions_Arch);
    
    
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City,
        SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
        COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City) 
    NOT IN (SELECT PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City;
ELSE
    RAISE NOTICE 'No records found for archiving.';
END IF;
END $$;, parameters: None
[2024-03-27T12:34:04.089+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.UndefinedColumn: column "prevperiodyear" does not exist
LINE 4:         PrevPeriodYear,
                ^
QUERY:  INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City,
        SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
        COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City) 
    NOT IN (SELECT PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City
CONTEXT:  PL/pgSQL function inline_code_block line 20 at SQL statement

[2024-03-27T12:34:04.108+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240326T190911, start_date=20240327T123402, end_date=20240327T123404
[2024-03-27T12:34:04.137+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2302 for task snapshot (column "prevperiodyear" does not exist
LINE 4:         PrevPeriodYear,
                ^
QUERY:  INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City,
        SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
        SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
        COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City) 
    NOT IN (SELECT PrevPeriodYear,PrevPeriodQuarter,PrevPeriodMonth,C.Country, C.City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
        PrevPeriodYear,
        PrevPeriodQuarter,
        PrevPeriodMonth,
        C.Country, 
        C.City
CONTEXT:  PL/pgSQL function inline_code_block line 20 at SQL statement
; 5164)
[2024-03-27T12:34:04.201+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-27T12:34:04.239+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
