[2024-05-03T09:03:56.429+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.summary_tables scheduled__2024-05-01T21:11:00+00:00 [queued]>
[2024-05-03T09:03:56.462+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.summary_tables scheduled__2024-05-01T21:11:00+00:00 [queued]>
[2024-05-03T09:03:56.464+0000] {taskinstance.py:2193} INFO - Starting attempt 11 of 16
[2024-05-03T09:03:56.516+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): summary_tables> on 2024-05-01 21:11:00+00:00
[2024-05-03T09:03:56.534+0000] {standard_task_runner.py:60} INFO - Started process 2867 to run task
[2024-05-03T09:03:56.545+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'summary_tables', 'scheduled__2024-05-01T21:11:00+00:00', '--job-id', '3311', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmp7znxujje']
[2024-05-03T09:03:56.554+0000] {standard_task_runner.py:88} INFO - Job 3311: Subtask summary_tables
[2024-05-03T09:03:56.720+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.summary_tables scheduled__2024-05-01T21:11:00+00:00 [running]> on host 518f7ecc027f
[2024-05-03T09:03:58.006+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='summary_tables' AIRFLOW_CTX_EXECUTION_DATE='2024-05-01T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='11' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-01T21:11:00+00:00'
[2024-05-03T09:03:58.034+0000] {sql.py:276} INFO - Executing: insert into Daily_Customers_Transactions (DW_customer_ID,date,country,media_source,installation_date,last_seen,last_order,
                                         days_since_installation,days_since_last_seen,days_since_last_order,engagement_status)


with dates as (
select 
DW_customer_ID,
date,
country,
media_source, 
installation_date,
valid_until,
(select max(date(event_time)) from DWH_Fact_Events e where e.DW_customer_ID = c.DW_customer_ID and date(event_time) <=date) last_Seen,
(select max(date(order_time)) from dwh_fact_product_in_order o where o.DW_customer_ID = c.DW_customer_ID and date(order_time) <=date) last_order
from dwh_dim_customers c join dwh_dim_dates d on c.installation_date <=d.date
where c.valid_until is null and  (c.DW_customer_ID, date) not in 
                                                            ( --Incremental loading
                                                            select distinct DW_customer_ID, date
                                                            from Daily_Customers_Transactions
                                                            ) 
),

temp as (
    select 
    DW_customer_ID,
    date,
    country,
    media_source, 
    installation_date,
    last_Seen,
    last_order,
    (date - installation_date) as days_since_installation,
    (date - last_seen) as days_since_last_seen,
    (date - last_order) as days_since_last_order
    from dates
    )
    select 
    DW_customer_ID, 
    date, 
    country, 
    media_source, 
    installation_date, 
    last_seen,
    last_order,
    days_since_installation,
    days_since_last_seen,
    days_since_last_order,
    case when installation_date >= (date - 7) then 'New'  --customer who installed the app in the past 7 days.  
    when last_seen < (date - 14) then 'Non-Engaged'
    when last_order is null or last_order < (date - 14) then 'Mid-Engaged'
    when last_order >= (date - 14) then 'Engaged'
    end 
    from temp ;


insert into Daily_Purchase_Agg (DW_customer_ID,order_date,country,supplier,category,media_source,total_cost,total_quantity,total_purchase_USD)
select 
DW_Customer_ID,
date(order_time),
country,
supplier,
category, 
media_source, 
sum(total_cost),
sum(quantity),
sum(total_price_after_discount * exchange_to_USD)
from dwh_fact_product_in_order
where  (DW_customer_ID, date(order_time)) not in 
                                            ( --Incremental loading
                                            select distinct DW_customer_ID, order_date
                                            from Daily_Purchase_Agg
                                            )
group by DW_Customer_ID, date(order_time), country, supplier, category, media_source;



insert into Daily_Event_Agg (event_description,event_date,country,media_source,count)
select 
event_description, 
date(event_time), 
country, 
media_source, 
count(*)
from DWH_Fact_Events
where  (event_description, date(event_time)) not in 
                                                    ( --Incremental loading
                                                    select distinct event_description, event_date
                                                    from Daily_Event_Agg
                                                    )
group by event_description, date(event_time), country, media_source;


--Monthly_Product_Rank
insert into Monthly_Product_Rank (DW_product_ID,first_day_of_month,category,number_of_orders,total_quantity,net_profit,
                                  orders_percent_rank,quantity_percent_rank,profit_percent_rank)
with cte as (
select 
dw_product_id, 
(DATE_TRUNC('MONTH', order_time))::DATE as first_day_of_month,
category,
count(order_id) number_of_orders,
sum(quantity) total_quantity,
sum (total_price_after_discount - total_cost) net_profit
from DWH_Fact_Product_In_Order
where (dw_product_id, (DATE_TRUNC('MONTH', order_time))::DATE) not in --Incremental loading
                                                                    (
                                                                     select distinct dw_product_id, first_day_of_month
                                                                     from Monthly_Product_Rank
                                                                    )
group by dw_product_id, (DATE_TRUNC('MONTH', order_time))::DATE, category                              
)
select 
dw_product_id,
first_day_of_month,
category,
number_of_orders,
total_quantity,
net_profit,
percent_rank() over (partition by category order by number_of_orders),
percent_rank() over (partition by category order by total_quantity),
percent_rank() over (partition by category order by net_profit)
from cte;                              

--Monthly_Supplier_Rank
insert into Monthly_Supplier_Rank (category,first_day_of_month,supplier,number_of_orders,total_quantity,net_profit,
                                   orders_percent_rank,quantity_percent_rank, profit_percent_rank)
with cte as (
select 
category,
(DATE_TRUNC('MONTH', order_time))::DATE as first_day_of_month,
supplier,
count(order_id) number_of_orders,
sum(quantity) total_quantity,
sum (total_price_after_discount - total_cost) net_profit
from DWH_Fact_Product_In_Order
where (category, (DATE_TRUNC('MONTH', order_time))::DATE) not in --Incremental loading
                                                                (
                                                                select distinct category, first_day_of_month
                                                                from Monthly_Supplier_Rank
                                                                )
group by category, (DATE_TRUNC('MONTH', order_time))::DATE, supplier                              
)
select 
category,
first_day_of_month,
supplier,
number_of_orders,
total_quantity,
net_profit,
percent_rank() over (partition by category order by number_of_orders),
percent_rank() over (partition by category order by total_quantity),
percent_rank() over (partition by category order by net_profit)
from cte;  
[2024-05-03T09:03:58.139+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-03T09:03:58.244+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-03T09:03:59.387+0000] {sql.py:457} INFO - Running statement: insert into Daily_Customers_Transactions (DW_customer_ID,date,country,media_source,installation_date,last_seen,last_order,
                                         days_since_installation,days_since_last_seen,days_since_last_order,engagement_status)


with dates as (
select 
DW_customer_ID,
date,
country,
media_source, 
installation_date,
valid_until,
(select max(date(event_time)) from DWH_Fact_Events e where e.DW_customer_ID = c.DW_customer_ID and date(event_time) <=date) last_Seen,
(select max(date(order_time)) from dwh_fact_product_in_order o where o.DW_customer_ID = c.DW_customer_ID and date(order_time) <=date) last_order
from dwh_dim_customers c join dwh_dim_dates d on c.installation_date <=d.date
where c.valid_until is null and  (c.DW_customer_ID, date) not in 
                                                            ( --Incremental loading
                                                            select distinct DW_customer_ID, date
                                                            from Daily_Customers_Transactions
                                                            ) 
),

temp as (
    select 
    DW_customer_ID,
    date,
    country,
    media_source, 
    installation_date,
    last_Seen,
    last_order,
    (date - installation_date) as days_since_installation,
    (date - last_seen) as days_since_last_seen,
    (date - last_order) as days_since_last_order
    from dates
    )
    select 
    DW_customer_ID, 
    date, 
    country, 
    media_source, 
    installation_date, 
    last_seen,
    last_order,
    days_since_installation,
    days_since_last_seen,
    days_since_last_order,
    case when installation_date >= (date - 7) then 'New'  --customer who installed the app in the past 7 days.  
    when last_seen < (date - 14) then 'Non-Engaged'
    when last_order is null or last_order < (date - 14) then 'Mid-Engaged'
    when last_order >= (date - 14) then 'Engaged'
    end 
    from temp ;


insert into Daily_Purchase_Agg (DW_customer_ID,order_date,country,supplier,category,media_source,total_cost,total_quantity,total_purchase_USD)
select 
DW_Customer_ID,
date(order_time),
country,
supplier,
category, 
media_source, 
sum(total_cost),
sum(quantity),
sum(total_price_after_discount * exchange_to_USD)
from dwh_fact_product_in_order
where  (DW_customer_ID, date(order_time)) not in 
                                            ( --Incremental loading
                                            select distinct DW_customer_ID, order_date
                                            from Daily_Purchase_Agg
                                            )
group by DW_Customer_ID, date(order_time), country, supplier, category, media_source;



insert into Daily_Event_Agg (event_description,event_date,country,media_source,count)
select 
event_description, 
date(event_time), 
country, 
media_source, 
count(*)
from DWH_Fact_Events
where  (event_description, date(event_time)) not in 
                                                    ( --Incremental loading
                                                    select distinct event_description, event_date
                                                    from Daily_Event_Agg
                                                    )
group by event_description, date(event_time), country, media_source;


--Monthly_Product_Rank
insert into Monthly_Product_Rank (DW_product_ID,first_day_of_month,category,number_of_orders,total_quantity,net_profit,
                                  orders_percent_rank,quantity_percent_rank,profit_percent_rank)
with cte as (
select 
dw_product_id, 
(DATE_TRUNC('MONTH', order_time))::DATE as first_day_of_month,
category,
count(order_id) number_of_orders,
sum(quantity) total_quantity,
sum (total_price_after_discount - total_cost) net_profit
from DWH_Fact_Product_In_Order
where (dw_product_id, (DATE_TRUNC('MONTH', order_time))::DATE) not in --Incremental loading
                                                                    (
                                                                     select distinct dw_product_id, first_day_of_month
                                                                     from Monthly_Product_Rank
                                                                    )
group by dw_product_id, (DATE_TRUNC('MONTH', order_time))::DATE, category                              
)
select 
dw_product_id,
first_day_of_month,
category,
number_of_orders,
total_quantity,
net_profit,
percent_rank() over (partition by category order by number_of_orders),
percent_rank() over (partition by category order by total_quantity),
percent_rank() over (partition by category order by net_profit)
from cte;                              

--Monthly_Supplier_Rank
insert into Monthly_Supplier_Rank (category,first_day_of_month,supplier,number_of_orders,total_quantity,net_profit,
                                   orders_percent_rank,quantity_percent_rank, profit_percent_rank)
with cte as (
select 
category,
(DATE_TRUNC('MONTH', order_time))::DATE as first_day_of_month,
supplier,
count(order_id) number_of_orders,
sum(quantity) total_quantity,
sum (total_price_after_discount - total_cost) net_profit
from DWH_Fact_Product_In_Order
where (category, (DATE_TRUNC('MONTH', order_time))::DATE) not in --Incremental loading
                                                                (
                                                                select distinct category, first_day_of_month
                                                                from Monthly_Supplier_Rank
                                                                )
group by category, (DATE_TRUNC('MONTH', order_time))::DATE, supplier                              
)
select 
category,
first_day_of_month,
supplier,
number_of_orders,
total_quantity,
net_profit,
percent_rank() over (partition by category order by number_of_orders),
percent_rank() over (partition by category order by total_quantity),
percent_rank() over (partition by category order by net_profit)
from cte;  , parameters: None
[2024-05-03T09:04:11.698+0000] {job.py:213} ERROR - Job heartbeat got an exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not translate host name "postgres" to address: Temporary failure in name resolution


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 187, in heartbeat
    self._merge_from(Job._fetch_from_db(self, session))
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/api_internal/internal_api_call.py", line 114, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/utils/session.py", line 76, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 308, in _fetch_from_db
    session.merge(job)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3056, in merge
    return self._merge(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3136, in _merge
    merged = self.get(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2853, in get
    return self._get_impl(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2975, in _get_impl
    return db_load_fn(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/loading.py", line 530, in load_on_pk_identity
    session.execute(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1716, in execute
    conn = self._connection_for_bind(bind)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1555, in _connection_for_bind
    return self._transaction._connection_for_bind(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 750, in _connection_for_bind
    conn = bind.connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/future/engine.py", line 412, in connect
    return super(Engine, self).connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3325, in connect
    return self._connection_cls(self, close_with_result=close_with_result)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 96, in __init__
    else engine.raw_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3404, in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3374, in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 2208, in _handle_dbapi_exception_noconnection
    util.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name "postgres" to address: Temporary failure in name resolution

(Background on this error at: https://sqlalche.me/e/14/e3q8)
[2024-05-03T09:04:11.961+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-05-03T09:04:27.181+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-05-03T09:04:28.914+0000] {sql.py:466} INFO - Rows affected: 95
[2024-05-03T09:04:28.933+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-05-03T09:04:36.424+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=summary_tables, execution_date=20240501T211100, start_date=20240503T090356, end_date=20240503T090436
[2024-05-03T09:04:36.620+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-05-03T09:04:36.685+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
