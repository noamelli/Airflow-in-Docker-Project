[2024-05-03T05:06:47.231+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dwh_backup scheduled__2024-05-01T21:11:00+00:00 [queued]>
[2024-05-03T05:06:47.252+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dwh_backup scheduled__2024-05-01T21:11:00+00:00 [queued]>
[2024-05-03T05:06:47.253+0000] {taskinstance.py:2193} INFO - Starting attempt 1 of 6
[2024-05-03T05:06:47.286+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dwh_backup> on 2024-05-01 21:11:00+00:00
[2024-05-03T05:06:47.298+0000] {standard_task_runner.py:60} INFO - Started process 96 to run task
[2024-05-03T05:06:47.308+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dwh_backup', 'scheduled__2024-05-01T21:11:00+00:00', '--job-id', '3240', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpfzsi9rx2']
[2024-05-03T05:06:47.316+0000] {standard_task_runner.py:88} INFO - Job 3240: Subtask dwh_backup
[2024-05-03T05:06:47.467+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dwh_backup scheduled__2024-05-01T21:11:00+00:00 [running]> on host 518f7ecc027f
[2024-05-03T05:06:48.270+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dwh_backup' AIRFLOW_CTX_EXECUTION_DATE='2024-05-01T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-01T21:11:00+00:00'
[2024-05-03T05:06:48.272+0000] {sql.py:276} INFO - Executing: truncate table DWH_Dim_Products_Backup;
truncate table DWH_Dim_Customers_Backup;
truncate table DWH_Fact_Product_In_Order_Backup;
truncate table DWH_Fact_Events_backup;
truncate table Daily_Customers_Transactions_backup;
truncate table Daily_Purchase_Agg_backup;
truncate table Daily_Event_Agg_backup;
truncate table Monthly_Product_Rank_backup;
truncate table Monthly_Supplier_Rank_backup;




insert into DWH_Dim_Products_Backup(DW_product_ID,Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost,Valid_From,Valid_Until)
select * from DWH_Dim_Products;

insert into DWH_Dim_Customers_Backup(DW_Customer_ID,Customer_ID,country,currency,exchange_to_USD,installation_date,media_source,Valid_From,Valid_Until)
select * from DWH_Dim_Customers;

insert into DWH_Fact_Product_In_Order_Backup(Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country, currency, exchange_to_USD,installation_date,media_source, supplier,
                                             category,Quantity,total_price_before_discount,Total_Cost, total_price_after_discount)
select * from DWH_Fact_Product_In_Order;

insert into DWH_Fact_Events_backup(event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select * from DWH_Fact_Events;

insert into Daily_Customers_Transactions_backup(DW_customer_ID,date,country,media_source,installation_date,last_seen, days_since_installation,days_since_last_seen,engagement_status)
select * from Daily_Customers_Transactions;

insert into Daily_Purchase_Agg_backup(DW_customer_ID,order_date,country,supplier,category,media_source,total_cost,total_purchase_USD)
select * from Daily_Purchase_Agg;

insert into Daily_Event_Agg_backup(event_description,event_date,country,media_source,count)
select * from Daily_Event_Agg;

insert into Monthly_Product_Rank_backup(DW_product_ID,first_day_of_month,category,popularity_percent_rank,profitabilty_percent_rank)
select * from monthly_Product_Rank;

insert into Monthly_Supplier_Rank_backup(category,first_day_of_month,supplier, popularity_percent_rank, profitabilty_percent_rank)
select * from monthly_Supplier_Rank;
[2024-05-03T05:06:48.288+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-03T05:06:48.304+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-03T05:06:48.358+0000] {sql.py:457} INFO - Running statement: truncate table DWH_Dim_Products_Backup;
truncate table DWH_Dim_Customers_Backup;
truncate table DWH_Fact_Product_In_Order_Backup;
truncate table DWH_Fact_Events_backup;
truncate table Daily_Customers_Transactions_backup;
truncate table Daily_Purchase_Agg_backup;
truncate table Daily_Event_Agg_backup;
truncate table Monthly_Product_Rank_backup;
truncate table Monthly_Supplier_Rank_backup;




insert into DWH_Dim_Products_Backup(DW_product_ID,Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost,Valid_From,Valid_Until)
select * from DWH_Dim_Products;

insert into DWH_Dim_Customers_Backup(DW_Customer_ID,Customer_ID,country,currency,exchange_to_USD,installation_date,media_source,Valid_From,Valid_Until)
select * from DWH_Dim_Customers;

insert into DWH_Fact_Product_In_Order_Backup(Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country, currency, exchange_to_USD,installation_date,media_source, supplier,
                                             category,Quantity,total_price_before_discount,Total_Cost, total_price_after_discount)
select * from DWH_Fact_Product_In_Order;

insert into DWH_Fact_Events_backup(event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select * from DWH_Fact_Events;

insert into Daily_Customers_Transactions_backup(DW_customer_ID,date,country,media_source,installation_date,last_seen, days_since_installation,days_since_last_seen,engagement_status)
select * from Daily_Customers_Transactions;

insert into Daily_Purchase_Agg_backup(DW_customer_ID,order_date,country,supplier,category,media_source,total_cost,total_purchase_USD)
select * from Daily_Purchase_Agg;

insert into Daily_Event_Agg_backup(event_description,event_date,country,media_source,count)
select * from Daily_Event_Agg;

insert into Monthly_Product_Rank_backup(DW_product_ID,first_day_of_month,category,popularity_percent_rank,profitabilty_percent_rank)
select * from monthly_Product_Rank;

insert into Monthly_Supplier_Rank_backup(category,first_day_of_month,supplier, popularity_percent_rank, profitabilty_percent_rank)
select * from monthly_Supplier_Rank;, parameters: None
[2024-05-03T05:06:49.009+0000] {sql.py:466} INFO - Rows affected: 95
[2024-05-03T05:06:49.013+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-05-03T05:06:49.081+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=dwh_backup, execution_date=20240501T211100, start_date=20240503T050647, end_date=20240503T050649
[2024-05-03T05:06:49.148+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-05-03T05:06:49.193+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-05-03T05:06:49.226+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
