[2024-04-29T10:33:58.024+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.fact_stg2dwh manual__2024-04-29T10:03:57.667103+00:00 [queued]>
[2024-04-29T10:33:58.042+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.fact_stg2dwh manual__2024-04-29T10:03:57.667103+00:00 [queued]>
[2024-04-29T10:33:58.043+0000] {taskinstance.py:2193} INFO - Starting attempt 6 of 6
[2024-04-29T10:33:58.072+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): fact_stg2dwh> on 2024-04-29 10:03:57.667103+00:00
[2024-04-29T10:33:58.083+0000] {standard_task_runner.py:60} INFO - Started process 327 to run task
[2024-04-29T10:33:58.089+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'fact_stg2dwh', 'manual__2024-04-29T10:03:57.667103+00:00', '--job-id', '3094', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpw_op77m5']
[2024-04-29T10:33:58.094+0000] {standard_task_runner.py:88} INFO - Job 3094: Subtask fact_stg2dwh
[2024-04-29T10:33:58.186+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.fact_stg2dwh manual__2024-04-29T10:03:57.667103+00:00 [running]> on host 9100669c2df2
[2024-04-29T10:33:59.179+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='fact_stg2dwh' AIRFLOW_CTX_EXECUTION_DATE='2024-04-29T10:03:57.667103+00:00' AIRFLOW_CTX_TRY_NUMBER='6' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-04-29T10:03:57.667103+00:00'
[2024-04-29T10:33:59.180+0000] {sql.py:276} INFO - Executing: insert into DWH_Fact_Product_In_Order (Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country,currency,exchange_to_usd,installation_date,media_source,
                                      supplier,category,Quantity,total_price_before_discount,Total_Cost,incremental_discount, total_price_after_discount)
select 
o.Order_ID,
p.DW_product_ID,
c.DW_Customer_ID,
o.Order_Time,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source,
p.supplier,
p.category,
d.Quantity,
(d.Quantity * p.Unit_Price) as Total_Price,
(d.Quantity * p.Unit_Cost) as Total_Cost,
coupon_discount/(select count(*) from STG_Fact_Details src where src.Order_ID=d.Order_ID),
(1-(coupon_discount/(select count(*) from STG_Fact_Details src where src.Order_ID=d.Order_ID)))*(d.Quantity * p.Unit_Price)
from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
left join DWH_Dim_Customers c on o.Customer_ID=c.Customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
left join DWH_Dim_Products p on d.Product_ID=p.Product_ID --left join in case there is a product that isn't shown in DWH_Dim_products, but was purchased
where p.Valid_Until is null and c.Valid_Until is null 
and (o.Order_ID,p.dw_product_id) not in ( select distinct Order_ID, dw_product_id
                                          from DWH_Fact_Product_In_Order
                                        );

insert into DWH_Fact_Events (event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select 
event_ID,
event_description,
event_time,
c.DW_customer_ID,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source
from STG_Fact_Events e left join DWH_Dim_Customers c on e.customer_ID=c.customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
where c.valid_until is null and event_ID not in (select distinct event_ID 
                                                 from DWH_Fact_Events  
                                                 );                       


[2024-04-29T10:33:59.193+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-29T10:33:59.206+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-29T10:33:59.229+0000] {sql.py:457} INFO - Running statement: insert into DWH_Fact_Product_In_Order (Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country,currency,exchange_to_usd,installation_date,media_source,
                                      supplier,category,Quantity,total_price_before_discount,Total_Cost,incremental_discount, total_price_after_discount)
select 
o.Order_ID,
p.DW_product_ID,
c.DW_Customer_ID,
o.Order_Time,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source,
p.supplier,
p.category,
d.Quantity,
(d.Quantity * p.Unit_Price) as Total_Price,
(d.Quantity * p.Unit_Cost) as Total_Cost,
coupon_discount/(select count(*) from STG_Fact_Details src where src.Order_ID=d.Order_ID),
(1-(coupon_discount/(select count(*) from STG_Fact_Details src where src.Order_ID=d.Order_ID)))*(d.Quantity * p.Unit_Price)
from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
left join DWH_Dim_Customers c on o.Customer_ID=c.Customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
left join DWH_Dim_Products p on d.Product_ID=p.Product_ID --left join in case there is a product that isn't shown in DWH_Dim_products, but was purchased
where p.Valid_Until is null and c.Valid_Until is null 
and (o.Order_ID,p.dw_product_id) not in ( select distinct Order_ID, dw_product_id
                                          from DWH_Fact_Product_In_Order
                                        );

insert into DWH_Fact_Events (event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select 
event_ID,
event_description,
event_time,
c.DW_customer_ID,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source
from STG_Fact_Events e left join DWH_Dim_Customers c on e.customer_ID=c.customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
where c.valid_until is null and event_ID not in (select distinct event_ID 
                                                 from DWH_Fact_Events  
                                                 );                       

, parameters: None
[2024-04-29T10:33:59.244+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.CheckViolation: no partition of relation "dwh_fact_product_in_order" found for row
DETAIL:  Partition key of the failing row contains (order_time) = (2024-04-07 10:00:00).

[2024-04-29T10:33:59.337+0000] {taskinstance.py:1149} INFO - Marking task as FAILED. dag_id=ETL_Flow, task_id=fact_stg2dwh, execution_date=20240429T100357, start_date=20240429T103358, end_date=20240429T103359
[2024-04-29T10:33:59.371+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 3094 for task fact_stg2dwh (no partition of relation "dwh_fact_product_in_order" found for row
DETAIL:  Partition key of the failing row contains (order_time) = (2024-04-07 10:00:00).
; 327)
[2024-04-29T10:33:59.429+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-04-29T10:33:59.470+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
