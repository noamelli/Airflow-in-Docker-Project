[2024-03-30T11:42:56.099+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T11:42:56.132+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T11:42:56.134+0000] {taskinstance.py:2193} INFO - Starting attempt 7 of 12
[2024-03-30T11:42:56.185+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-25 21:11:00+00:00
[2024-03-30T11:42:56.201+0000] {standard_task_runner.py:60} INFO - Started process 15567 to run task
[2024-03-30T11:42:56.213+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'scheduled__2024-03-25T21:11:00+00:00', '--job-id', '2396', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpx7trc7vs']
[2024-03-30T11:42:56.221+0000] {standard_task_runner.py:88} INFO - Job 2396: Subtask snapshot
[2024-03-30T11:42:56.366+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot scheduled__2024-03-25T21:11:00+00:00 [running]> on host cb216a3a40e5
[2024-03-30T11:42:57.019+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-25T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='7' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-25T21:11:00+00:00'
[2024-03-30T11:42:57.021+0000] {sql.py:276} INFO - Executing: --The rellevant perdios for loading are months that have been ended and have not been loaded yet 
CREATE OR REPLACE VIEW rellevant_periods AS 
SELECT DISTINCT 
(DATE_TRUNC('MONTH', order_time))::DATE AS StartOfMonth,
(DATE_TRUNC('MONTH', order_time) + INTERVAL '1 month' - INTERVAL '1 day')::DATE AS EndOfMonth
FROM dwh_fact_product_in_order
WHERE (DATE_TRUNC('MONTH', order_time))::DATE NOT IN  
                    (SELECT DISTINCT StartOfMonth
                     FROM Snapshot_Customers_Transactions_Arch)
AND (DATE_TRUNC('MONTH', order_time))::DATE <> (DATE_TRUNC('MONTH', CURRENT_DATE))::DATE    ; 



    CREATE OR REPLACE VIEW status_calculation AS
    SELECT DISTINCT 
        cd.StartOfMonth,
        c.DW_Customer_ID,
        C.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID
                GROUP BY t.Customer_ID
                HAVING MIN ((DATE_TRUNC('MONTH', p.order_time))::DATE) = cd.StartOfMonth
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfMonth
                AND DATE(Order_Time) >= cd.StartOfMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfMonth
                AND DATE(Order_Time) >= cd.StartOfMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    CROSS JOIN rellevant_periods cd -- Showing all the optional combinations 
    WHERE c.Valid_Until IS NULL ; 


    -- Adding the new records to the archive table - it contains historical data beacuse this data is being used in status_calculation table 
    INSERT INTO Snapshot_Customers_Transactions_Arch (DW_Customer_ID, Customer_ID, StartOfMonth, Status)
    SELECT 
        DW_Customer_ID,
        Customer_ID,
        StartOfMonth,
        Status 
    FROM status_calculation t ; 

    
    --Using incremental loading because we Snapshot_Customers_Transactions_Arch contains historical data 
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City,
    SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
    COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.DW_Customer_ID=C.DW_Customer_ID
    WHERE (EXTRACT (year from StartOfMonth),EXTRACT (Quarter from StartOfMonth),EXTRACT (month from StartOfMonth),C.Country, C.City) 
    NOT IN (select distinct Year,Quarter,month,Country, City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City;


[2024-03-30T11:42:57.045+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T11:42:57.065+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T11:42:57.262+0000] {sql.py:457} INFO - Running statement: --The rellevant perdios for loading are months that have been ended and have not been loaded yet 
CREATE OR REPLACE VIEW rellevant_periods AS 
SELECT DISTINCT 
(DATE_TRUNC('MONTH', order_time))::DATE AS StartOfMonth,
(DATE_TRUNC('MONTH', order_time) + INTERVAL '1 month' - INTERVAL '1 day')::DATE AS EndOfMonth
FROM dwh_fact_product_in_order
WHERE (DATE_TRUNC('MONTH', order_time))::DATE NOT IN  
                    (SELECT DISTINCT StartOfMonth
                     FROM Snapshot_Customers_Transactions_Arch)
AND (DATE_TRUNC('MONTH', order_time))::DATE <> (DATE_TRUNC('MONTH', CURRENT_DATE))::DATE    ; 



    CREATE OR REPLACE VIEW status_calculation AS
    SELECT DISTINCT 
        cd.StartOfMonth,
        c.DW_Customer_ID,
        C.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID
                GROUP BY t.Customer_ID
                HAVING MIN ((DATE_TRUNC('MONTH', p.order_time))::DATE) = cd.StartOfMonth
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfMonth
                AND DATE(Order_Time) >= cd.StartOfMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfMonth
                AND DATE(Order_Time) >= cd.StartOfMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    CROSS JOIN rellevant_periods cd -- Showing all the optional combinations 
    WHERE c.Valid_Until IS NULL ; 


    -- Adding the new records to the archive table - it contains historical data beacuse this data is being used in status_calculation table 
    INSERT INTO Snapshot_Customers_Transactions_Arch (DW_Customer_ID, Customer_ID, StartOfMonth, Status)
    SELECT 
        DW_Customer_ID,
        Customer_ID,
        StartOfMonth,
        Status 
    FROM status_calculation t ; 

    
    --Using incremental loading because we Snapshot_Customers_Transactions_Arch contains historical data 
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City,
    SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
    COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.DW_Customer_ID=C.DW_Customer_ID
    WHERE (EXTRACT (year from StartOfMonth),EXTRACT (Quarter from StartOfMonth),EXTRACT (month from StartOfMonth),C.Country, C.City) 
    NOT IN (select distinct Year,Quarter,month,Country, City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City;

, parameters: None
[2024-03-30T11:43:11.288+0000] {job.py:213} ERROR - Job heartbeat got an exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not translate host name "postgres" to address: Temporary failure in name resolution


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 187, in heartbeat
    self._merge_from(Job._fetch_from_db(self, session))
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/api_internal/internal_api_call.py", line 114, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/utils/session.py", line 76, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 308, in _fetch_from_db
    session.merge(job)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3056, in merge
    return self._merge(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3136, in _merge
    merged = self.get(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2853, in get
    return self._get_impl(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2975, in _get_impl
    return db_load_fn(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/loading.py", line 530, in load_on_pk_identity
    session.execute(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1716, in execute
    conn = self._connection_for_bind(bind)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1555, in _connection_for_bind
    return self._transaction._connection_for_bind(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 750, in _connection_for_bind
    conn = bind.connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/future/engine.py", line 412, in connect
    return super(Engine, self).connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3325, in connect
    return self._connection_cls(self, close_with_result=close_with_result)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 96, in __init__
    else engine.raw_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3404, in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3374, in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 2208, in _handle_dbapi_exception_noconnection
    util.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name "postgres" to address: Temporary failure in name resolution

(Background on this error at: https://sqlalche.me/e/14/e3q8)
[2024-03-30T11:43:11.908+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-03-30T11:43:40.054+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-03-30T11:44:06.038+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-03-30T11:44:21.243+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.AmbiguousColumn: column reference "dw_customer_id" is ambiguous
LINE 81:     COUNT(DISTINCT DW_Customer_ID) 
                            ^

[2024-03-30T11:44:23.528+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240325T211100, start_date=20240330T114256, end_date=20240330T114423
[2024-03-30T11:44:23.613+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2396 for task snapshot (column reference "dw_customer_id" is ambiguous
LINE 81:     COUNT(DISTINCT DW_Customer_ID) 
                            ^
; 15567)
[2024-03-30T11:44:23.666+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-30T11:44:23.735+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
