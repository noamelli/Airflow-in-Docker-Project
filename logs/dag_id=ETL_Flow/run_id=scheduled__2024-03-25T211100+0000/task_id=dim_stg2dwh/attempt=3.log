[2024-03-30T11:35:20.884+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T11:35:20.903+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T11:35:20.904+0000] {taskinstance.py:2193} INFO - Starting attempt 3 of 8
[2024-03-30T11:35:20.934+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_stg2dwh> on 2024-03-25 21:11:00+00:00
[2024-03-30T11:35:20.948+0000] {standard_task_runner.py:60} INFO - Started process 15425 to run task
[2024-03-30T11:35:20.960+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_stg2dwh', 'scheduled__2024-03-25T21:11:00+00:00', '--job-id', '2382', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpf6vosho8']
[2024-03-30T11:35:20.964+0000] {standard_task_runner.py:88} INFO - Job 2382: Subtask dim_stg2dwh
[2024-03-30T11:35:21.041+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_stg2dwh scheduled__2024-03-25T21:11:00+00:00 [running]> on host cb216a3a40e5
[2024-03-30T11:35:21.381+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_stg2dwh' AIRFLOW_CTX_EXECUTION_DATE='2024-03-25T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-25T21:11:00+00:00'
[2024-03-30T11:35:21.383+0000] {sql.py:276} INFO - Executing: truncate table DWH_Dim_Dates;
truncate table DWH_Dim_Time;

insert into DWH_Dim_Dates (Date,Year,Quarter,Month,Day)
select * 
from STG_Dim_Dates;

insert into DWH_Dim_Time (DateTime,Date,Hour)
select * 
from STG_Dim_Time;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers (Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax, Valid_From)
select c.*,
(select min ((DATE_TRUNC('day', o.Order_Time))::DATE)
 from STG_Fact_Orders o
 where o.Customer_ID=c.Customer_ID)
from STG_Dim_Customers c  
where Customer_ID not in (
                          select distinct Customer_ID
                          from DWH_Dim_Customers
                          );



--update the valid until date of customers who moved to another city/country

update DWH_Dim_Customers
set Valid_Until=current_date
where DW_Customer_ID in (
                            select DW_Customer_ID 
                            from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
                            where (s.City <> d.City or s.Country <> d.Country) and d.Valid_Until is null
                          );


--insert records of customers who moved to another city/country                             
insert into DWH_Dim_Customers (Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax)
select s.Customer_ID,s.Company_Name,s.Contact_Name,s.Street,s.City,s.Postal_Code,s.Country,s.Phone,s.Fax
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.City <> d.City or s.Country <> d.Country;

--products

-- insert all the new products records 
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select *
from STG_Dim_Products s 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
-- update the valid until date of products that their price/cost/supplier have changed
update DWH_Dim_Products
set Valid_Until=current_date
where DW_Prdocut_ID in (
                            select DW_Prdocut_ID 
                            from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
                            where (s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier) 
                            and d.Valid_Until is null
                          );



-- insert records of products that their price/cost/supplier have changed                             
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select s.Product_ID,s.Product_Name,s.Supplier,s.Category,s.Unit_Price,s.Unit_Cost
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier;

-- employees

-- insert all the new employees records 
insert into DWH_Dim_Employees (Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary, Valid_From)
select e.*, e.Hire_Date
from STG_Dim_Employees e
where Employee_ID not in 
                            (
                              select distinct Employee_ID
                              from DWH_Dim_Employees       
                            );
--update the valid until date of employees that their salary/title/manager/office have changed
update DWH_Dim_Employees
set Valid_Until=current_date
where DWH_Dim_Employees in (
                            select DWH_Dim_Employees 
                            from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID = s.Employee_ID
                            where (s.Reports_To <> d.Reports_To or s.title <> d.title or s.Month_Salary <> d.Month_Salary or s.office <> d.office) 
                            and d.Valid_Until is null
                          );

-- insert records of employees that their manager/title/salary/office have changed                             
insert into DWH_Dim_Employees (Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary)
select s.Employee_ID,s.Last_Name,s.First_Name,s.Title,s.Hire_Date,s.Office,s.Reports_To,s.Month_Salary
from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID=s.Employee_ID
where s.Reports_To <> d.Reports_To or s.title <> d.title or s.Month_Salary <> d.Month_Salary or s.office <> d.office


[2024-03-30T11:35:21.394+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T11:35:21.404+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T11:35:21.423+0000] {sql.py:457} INFO - Running statement: truncate table DWH_Dim_Dates;
truncate table DWH_Dim_Time;

insert into DWH_Dim_Dates (Date,Year,Quarter,Month,Day)
select * 
from STG_Dim_Dates;

insert into DWH_Dim_Time (DateTime,Date,Hour)
select * 
from STG_Dim_Time;

--customers
--insert all the new customers records 
insert into DWH_Dim_Customers (Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax, Valid_From)
select c.*,
(select min ((DATE_TRUNC('day', o.Order_Time))::DATE)
 from STG_Fact_Orders o
 where o.Customer_ID=c.Customer_ID)
from STG_Dim_Customers c  
where Customer_ID not in (
                          select distinct Customer_ID
                          from DWH_Dim_Customers
                          );



--update the valid until date of customers who moved to another city/country

update DWH_Dim_Customers
set Valid_Until=current_date
where DW_Customer_ID in (
                            select DW_Customer_ID 
                            from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID = s.Customer_ID
                            where (s.City <> d.City or s.Country <> d.Country) and d.Valid_Until is null
                          );


--insert records of customers who moved to another city/country                             
insert into DWH_Dim_Customers (Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax)
select s.Customer_ID,s.Company_Name,s.Contact_Name,s.Street,s.City,s.Postal_Code,s.Country,s.Phone,s.Fax
from STG_Dim_Customers s inner join DWH_Dim_Customers d on d.Customer_ID=s.Customer_ID
where s.City <> d.City or s.Country <> d.Country;

--products

-- insert all the new products records 
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select *
from STG_Dim_Products s 
where Product_ID not in 
                            (
                              select distinct Product_ID
                              from DWH_Dim_Products       
                            );
-- update the valid until date of products that their price/cost/supplier have changed
update DWH_Dim_Products
set Valid_Until=current_date
where DW_Prdocut_ID in (
                            select DW_Prdocut_ID 
                            from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID = s.Product_ID
                            where (s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier) 
                            and d.Valid_Until is null
                          );



-- insert records of products that their price/cost/supplier have changed                             
insert into DWH_Dim_Products (Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select s.Product_ID,s.Product_Name,s.Supplier,s.Category,s.Unit_Price,s.Unit_Cost
from STG_Dim_Products s inner join DWH_Dim_Products d on d.Product_ID=s.Product_ID
where s.Unit_Cost <> d.Unit_Cost or s.Unit_Price <> d.Unit_Price or s.Supplier <> d.Supplier;

-- employees

-- insert all the new employees records 
insert into DWH_Dim_Employees (Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary, Valid_From)
select e.*, e.Hire_Date
from STG_Dim_Employees e
where Employee_ID not in 
                            (
                              select distinct Employee_ID
                              from DWH_Dim_Employees       
                            );
--update the valid until date of employees that their salary/title/manager/office have changed
update DWH_Dim_Employees
set Valid_Until=current_date
where DWH_Dim_Employees in (
                            select DWH_Dim_Employees 
                            from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID = s.Employee_ID
                            where (s.Reports_To <> d.Reports_To or s.title <> d.title or s.Month_Salary <> d.Month_Salary or s.office <> d.office) 
                            and d.Valid_Until is null
                          );

-- insert records of employees that their manager/title/salary/office have changed                             
insert into DWH_Dim_Employees (Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary)
select s.Employee_ID,s.Last_Name,s.First_Name,s.Title,s.Hire_Date,s.Office,s.Reports_To,s.Month_Salary
from STG_Dim_Employees s inner join DWH_Dim_Employees d on d.Employee_ID=s.Employee_ID
where s.Reports_To <> d.Reports_To or s.title <> d.title or s.Month_Salary <> d.Month_Salary or s.office <> d.office

, parameters: None
[2024-03-30T11:35:21.936+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.NotNullViolation: null value in column "valid_from" of relation "dwh_dim_customers" violates not-null constraint
DETAIL:  Failing row contains (1, 127, Stephanies, Staffan Blond, Gatauppochner 1, Stockholm, 111 11, Sweden, (8) 10 20 30, (8) 11 22 33, null, null).

[2024-03-30T11:35:21.948+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=dim_stg2dwh, execution_date=20240325T211100, start_date=20240330T113520, end_date=20240330T113521
[2024-03-30T11:35:21.975+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2382 for task dim_stg2dwh (null value in column "valid_from" of relation "dwh_dim_customers" violates not-null constraint
DETAIL:  Failing row contains (1, 127, Stephanies, Staffan Blond, Gatauppochner 1, Stockholm, 111 11, Sweden, (8) 10 20 30, (8) 11 22 33, null, null).
; 15425)
[2024-03-30T11:35:22.017+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-30T11:35:22.031+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-03-30T11:35:22.051+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
