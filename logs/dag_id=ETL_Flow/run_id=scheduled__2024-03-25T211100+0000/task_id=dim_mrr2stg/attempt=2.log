[2024-03-30T10:15:51.494+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T10:15:51.505+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T10:15:51.506+0000] {taskinstance.py:2193} INFO - Starting attempt 2 of 7
[2024-03-30T10:15:51.522+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_mrr2stg> on 2024-03-25 21:11:00+00:00
[2024-03-30T10:15:51.528+0000] {standard_task_runner.py:60} INFO - Started process 14501 to run task
[2024-03-30T10:15:51.533+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_mrr2stg', 'scheduled__2024-03-25T21:11:00+00:00', '--job-id', '2370', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpb40k_23g']
[2024-03-30T10:15:51.536+0000] {standard_task_runner.py:88} INFO - Job 2370: Subtask dim_mrr2stg
[2024-03-30T10:15:51.595+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [running]> on host cb216a3a40e5
[2024-03-30T10:15:51.869+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_mrr2stg' AIRFLOW_CTX_EXECUTION_DATE='2024-03-25T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='2' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-25T21:11:00+00:00'
[2024-03-30T10:15:51.870+0000] {sql.py:276} INFO - Executing: insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost, Valid_From)
select 
cast(Product_ID as integer),
Product_Name,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
    then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
    then cast(Unit_Cost as decimal(15,5)) else null end,
'2018-01-01'
from MRR_Dim_Products;

insert into STG_Dim_Customers(Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax,Valid_From)
select
cast(Customer_ID as integer),
Company_Name,
Contact_Name,
Street,
City,
Postal_Code,
Country,
Phone,
Fax,
(select MIN ((DATE_TRUNC('MONTH', order_time))::DATE)
 from DWH_Fact_Product_In_Order p join DWH_Dim_Customers d on p.DW_Customer_ID=d.DW_Customer_ID
 where d.Customer_ID=m.Customer_ID)
from MRR_Dim_Customers m;

insert into STG_Dim_Employees(Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary,Valid_From)
select 
cast(Employee_ID as integer),
Last_Name,
First_Name,
Title,
case
    -- YYYY-MM-DD
    when Hire_Date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(Hire_Date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when Hire_Date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(Hire_Date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when Hire_Date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(Hire_Date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when Hire_Date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(Hire_Date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when Hire_Date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(Hire_Date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when Hire_Date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(Hire_Date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when Hire_Date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(Hire_Date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when Hire_Date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(Hire_Date, 'YYYY\MM\DD')
    else '1900-01-01' end,  
case when Office similar to '[0-9]+' then cast(Office as int) else 0 end,
case when Reports_To similar to '[0-9]+' then cast(Reports_To as int) else 0 end,
case when Month_Salary is null then null else cast(Month_Salary as decimal(15,5)) end,
Hire_Date
from MRR_Dim_Employees;

insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2018-01-01'::date, CURRENT_DATE::date, '1 day');


insert into STG_Dim_Time(DateTime, Date, Hour)
SELECT
  generate_series::TIMESTAMP,
  DATE_TRUNC('hour', generate_series::TIMESTAMP),
  EXTRACT(HOUR FROM generate_series::TIMESTAMP) AS hour
FROM
  GENERATE_SERIES('2018-01-01'::TIMESTAMP, CURRENT_DATE::TIMESTAMP, '1 hour');

[2024-03-30T10:15:51.881+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T10:15:51.904+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T10:15:51.918+0000] {sql.py:457} INFO - Running statement: insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost, Valid_From)
select 
cast(Product_ID as integer),
Product_Name,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
    then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
    then cast(Unit_Cost as decimal(15,5)) else null end,
'2018-01-01'
from MRR_Dim_Products;

insert into STG_Dim_Customers(Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax,Valid_From)
select
cast(Customer_ID as integer),
Company_Name,
Contact_Name,
Street,
City,
Postal_Code,
Country,
Phone,
Fax,
(select MIN ((DATE_TRUNC('MONTH', order_time))::DATE)
 from DWH_Fact_Product_In_Order p join DWH_Dim_Customers d on p.DW_Customer_ID=d.DW_Customer_ID
 where d.Customer_ID=m.Customer_ID)
from MRR_Dim_Customers m;

insert into STG_Dim_Employees(Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary,Valid_From)
select 
cast(Employee_ID as integer),
Last_Name,
First_Name,
Title,
case
    -- YYYY-MM-DD
    when Hire_Date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(Hire_Date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when Hire_Date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(Hire_Date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when Hire_Date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(Hire_Date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when Hire_Date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(Hire_Date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when Hire_Date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(Hire_Date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when Hire_Date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(Hire_Date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when Hire_Date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(Hire_Date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when Hire_Date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(Hire_Date, 'YYYY\MM\DD')
    else '1900-01-01' end,  
case when Office similar to '[0-9]+' then cast(Office as int) else 0 end,
case when Reports_To similar to '[0-9]+' then cast(Reports_To as int) else 0 end,
case when Month_Salary is null then null else cast(Month_Salary as decimal(15,5)) end,
Hire_Date
from MRR_Dim_Employees;

insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2018-01-01'::date, CURRENT_DATE::date, '1 day');


insert into STG_Dim_Time(DateTime, Date, Hour)
SELECT
  generate_series::TIMESTAMP,
  DATE_TRUNC('hour', generate_series::TIMESTAMP),
  EXTRACT(HOUR FROM generate_series::TIMESTAMP) AS hour
FROM
  GENERATE_SERIES('2018-01-01'::TIMESTAMP, CURRENT_DATE::TIMESTAMP, '1 hour');
, parameters: None
[2024-03-30T10:15:51.926+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.UndefinedColumn: column "valid_from" of relation "stg_dim_products" does not exist
LINE 1: ...duct_Name,Supplier,Category,Unit_Price,Unit_Cost, Valid_From...
                                                             ^

[2024-03-30T10:15:51.938+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=dim_mrr2stg, execution_date=20240325T211100, start_date=20240330T101551, end_date=20240330T101551
[2024-03-30T10:15:51.954+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2370 for task dim_mrr2stg (column "valid_from" of relation "stg_dim_products" does not exist
LINE 1: ...duct_Name,Supplier,Category,Unit_Price,Unit_Cost, Valid_From...
                                                             ^
; 14501)
[2024-03-30T10:15:51.987+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-30T10:15:52.000+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-03-30T10:15:52.019+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
