[2024-03-30T13:55:20.294+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T13:55:20.306+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [queued]>
[2024-03-30T13:55:20.307+0000] {taskinstance.py:2193} INFO - Starting attempt 20 of 25
[2024-03-30T13:55:20.323+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): dim_mrr2stg> on 2024-03-25 21:11:00+00:00
[2024-03-30T13:55:20.332+0000] {standard_task_runner.py:60} INFO - Started process 17537 to run task
[2024-03-30T13:55:20.336+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'dim_mrr2stg', 'scheduled__2024-03-25T21:11:00+00:00', '--job-id', '2498', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmp3f5_hqy2']
[2024-03-30T13:55:20.340+0000] {standard_task_runner.py:88} INFO - Job 2498: Subtask dim_mrr2stg
[2024-03-30T13:55:20.403+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.dim_mrr2stg scheduled__2024-03-25T21:11:00+00:00 [running]> on host cb216a3a40e5
[2024-03-30T13:55:20.702+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='dim_mrr2stg' AIRFLOW_CTX_EXECUTION_DATE='2024-03-25T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='20' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-25T21:11:00+00:00'
[2024-03-30T13:55:20.703+0000] {sql.py:276} INFO - Executing: insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select 
cast(Product_ID as integer),
case when Product_Name is null then 'missing' else Product_Name end,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
    then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
    then cast(Unit_Cost as decimal(15,5)) else null end
from MRR_Dim_Products
where isValid="valid";

insert into STG_Dim_Customers(Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax)
select
cast(Customer_ID as integer),
case when Company_Name is null then 'missing' else Company_Name end,
case when Contact_Name is null then 'missing' else Contact_Name end,
case when Street is null then 'missing' else Street end,
case when City is null then 'missing' else City end,
case when Postal_Code is null then 'missing' else Postal_Code end,
case when Country is null then 'missing' else Country end,
case when Phone is null then 'missing' else Phone end,
case when Fax is null then 'missing' else Fax end 
from MRR_Dim_Customers
where isValid="valid";

insert into STG_Dim_Employees(Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary)
select 
cast(Employee_ID as integer),
case when Last_Name is null then 'missing' else Last_Name end,
case when First_Name is null then 'missing' else First_Name end ,
case when Title is null then 'missing' else Title end ,
case
    -- YYYY-MM-DD
    when Hire_Date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(Hire_Date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when Hire_Date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(Hire_Date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when Hire_Date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(Hire_Date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when Hire_Date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(Hire_Date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when Hire_Date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(Hire_Date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when Hire_Date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(Hire_Date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when Hire_Date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(Hire_Date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when Hire_Date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(Hire_Date, 'YYYY\MM\DD')
    else '1900-01-01' end,  
case when Office similar to '[0-9]+' then cast(Office as int) else 0 end,
case when Reports_To similar to '[0-9]+' then cast(Reports_To as int) when Reports_To is null then null else 0 end,
case when Month_Salary similar to '[0-9]+(\.[0-9]+)?' and cast(Month_Salary as decimal(15,5))>=0
    then cast(Month_Salary as decimal(15,5)) else null end
from MRR_Dim_Employees
where isValid="valid";


insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2018-01-01'::date, CURRENT_DATE::date, '1 day');


insert into STG_Dim_Time(DateTime, Date, Hour)
SELECT
  generate_series::TIMESTAMP,
  DATE_TRUNC('hour', generate_series::TIMESTAMP),
  EXTRACT(HOUR FROM generate_series::TIMESTAMP) AS hour
FROM
  GENERATE_SERIES('2018-01-01'::TIMESTAMP, CURRENT_DATE::TIMESTAMP, '1 hour');

[2024-03-30T13:55:20.716+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T13:55:20.727+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-30T13:55:20.788+0000] {sql.py:457} INFO - Running statement: insert into STG_Dim_Products(Product_ID,Product_Name,Supplier,Category,Unit_Price,Unit_Cost)
select 
cast(Product_ID as integer),
case when Product_Name is null then 'missing' else Product_Name end,
case when Supplier similar to '[0-9]+' then cast(Supplier as integer) else 0 end,
case when Category similar to '[0-9]+' then cast(Category as integer) else 0 end,
case when Unit_Price similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Price as decimal(15,5))>=0
    then cast(Unit_Price as decimal(15,5)) else null end,
case when Unit_Cost similar to '[0-9]+(\.[0-9]+)?' and cast(Unit_Cost as decimal(15,5))>=0
    then cast(Unit_Cost as decimal(15,5)) else null end
from MRR_Dim_Products
where isValid="valid";

insert into STG_Dim_Customers(Customer_ID,Company_Name,Contact_Name,Street,City,Postal_Code,Country,Phone,Fax)
select
cast(Customer_ID as integer),
case when Company_Name is null then 'missing' else Company_Name end,
case when Contact_Name is null then 'missing' else Contact_Name end,
case when Street is null then 'missing' else Street end,
case when City is null then 'missing' else City end,
case when Postal_Code is null then 'missing' else Postal_Code end,
case when Country is null then 'missing' else Country end,
case when Phone is null then 'missing' else Phone end,
case when Fax is null then 'missing' else Fax end 
from MRR_Dim_Customers
where isValid="valid";

insert into STG_Dim_Employees(Employee_ID,Last_Name,First_Name,Title,Hire_Date,Office,Reports_To,Month_Salary)
select 
cast(Employee_ID as integer),
case when Last_Name is null then 'missing' else Last_Name end,
case when First_Name is null then 'missing' else First_Name end ,
case when Title is null then 'missing' else Title end ,
case
    -- YYYY-MM-DD
    when Hire_Date ~ '^\d{4}-\d{2}-\d{2}$' then to_date(Hire_Date, 'YYYY-MM-DD')
    -- DD-MM-YYYY
    when Hire_Date ~ '^\d{2}-\d{2}-\d{4}$' then to_date(Hire_Date, 'DD-MM-YYYY')
    -- YYYY.MM.DD
    when Hire_Date ~ '^\d{4}.\d{2}.\d{2}$' then to_date(Hire_Date, 'YYYY.MM.DD')
    -- DD.MM.YYYY
    when Hire_Date ~ '^\d{2}.\d{2}.\d{4}$' then to_date(Hire_Date, 'DD.MM.YYYY')
    -- DD/MM/YYYY
    when Hire_Date ~ '^\d{2}/\d{2}/\d{4}$' then to_date(Hire_Date, 'DD/MM/YYYY')
    -- YYYY/MM/DD
    when Hire_Date ~ '^\d{4}/\d{2}/\d{2}$' then to_date(Hire_Date, 'YYYY/MM/DD')
    -- DD\MM\YYYY
    when Hire_Date ~ '^\d{2}\\d{2}\\d{4}$' then to_date(Hire_Date, 'DD\MM\YYYY')
    -- YYYY\MM\DD
    when Hire_Date ~ '^\d{4}\\d{2}\\d{2}$' then to_date(Hire_Date, 'YYYY\MM\DD')
    else '1900-01-01' end,  
case when Office similar to '[0-9]+' then cast(Office as int) else 0 end,
case when Reports_To similar to '[0-9]+' then cast(Reports_To as int) when Reports_To is null then null else 0 end,
case when Month_Salary similar to '[0-9]+(\.[0-9]+)?' and cast(Month_Salary as decimal(15,5))>=0
    then cast(Month_Salary as decimal(15,5)) else null end
from MRR_Dim_Employees
where isValid="valid";


insert into STG_Dim_Dates(Date,Year,Quarter,Month,Day)
select
generate_series::date,
extract(year from generate_series),
extract(quarter from generate_series),
extract(month from generate_series),
extract(day from generate_series)
from generate_series('2018-01-01'::date, CURRENT_DATE::date, '1 day');


insert into STG_Dim_Time(DateTime, Date, Hour)
SELECT
  generate_series::TIMESTAMP,
  DATE_TRUNC('hour', generate_series::TIMESTAMP),
  EXTRACT(HOUR FROM generate_series::TIMESTAMP) AS hour
FROM
  GENERATE_SERIES('2018-01-01'::TIMESTAMP, CURRENT_DATE::TIMESTAMP, '1 hour');
, parameters: None
[2024-03-30T13:55:20.798+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.UndefinedColumn: column "valid" does not exist
LINE 12: where isValid="valid";
                       ^
HINT:  Perhaps you meant to reference the column "mrr_dim_products.isvalid".

[2024-03-30T13:55:20.812+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=dim_mrr2stg, execution_date=20240325T211100, start_date=20240330T135520, end_date=20240330T135520
[2024-03-30T13:55:20.834+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 2498 for task dim_mrr2stg (column "valid" does not exist
LINE 12: where isValid="valid";
                       ^
HINT:  Perhaps you meant to reference the column "mrr_dim_products.isvalid".
; 17537)
[2024-03-30T13:55:20.872+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-30T13:55:20.897+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-03-30T13:55:20.937+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
