[2024-04-25T14:35:58.897+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.create_tables scheduled__2024-04-16T21:11:00+00:00 [queued]>
[2024-04-25T14:35:59.196+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.create_tables scheduled__2024-04-16T21:11:00+00:00 [queued]>
[2024-04-25T14:35:59.200+0000] {taskinstance.py:2193} INFO - Starting attempt 2 of 6
[2024-04-25T14:35:59.428+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): create_tables> on 2024-04-16 21:11:00+00:00
[2024-04-25T14:35:59.482+0000] {standard_task_runner.py:60} INFO - Started process 368 to run task
[2024-04-25T14:35:59.523+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'create_tables', 'scheduled__2024-04-16T21:11:00+00:00', '--job-id', '2559', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmph8xk8icb']
[2024-04-25T14:35:59.545+0000] {standard_task_runner.py:88} INFO - Job 2559: Subtask create_tables
[2024-04-25T14:36:00.197+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.create_tables scheduled__2024-04-16T21:11:00+00:00 [running]> on host d838c4eb4dcc
[2024-04-25T14:36:21.313+0000] {job.py:213} ERROR - Job heartbeat got an exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not translate host name "postgres" to address: Temporary failure in name resolution


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 187, in heartbeat
    self._merge_from(Job._fetch_from_db(self, session))
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/api_internal/internal_api_call.py", line 114, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/utils/session.py", line 76, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/jobs/job.py", line 308, in _fetch_from_db
    session.merge(job)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3056, in merge
    return self._merge(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 3136, in _merge
    merged = self.get(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2853, in get
    return self._get_impl(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 2975, in _get_impl
    return db_load_fn(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/loading.py", line 530, in load_on_pk_identity
    session.execute(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1716, in execute
    conn = self._connection_for_bind(bind)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 1555, in _connection_for_bind
    return self._transaction._connection_for_bind(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py", line 750, in _connection_for_bind
    conn = bind.connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/future/engine.py", line 412, in connect
    return super(Engine, self).connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3325, in connect
    return self._connection_cls(self, close_with_result=close_with_result)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 96, in __init__
    else engine.raw_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3404, in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3374, in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 2208, in _handle_dbapi_exception_noconnection
    util.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py", line 3371, in _wrap_pool_connect
    return fn()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 327, in connect
    return _ConnectionFairy._checkout(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 894, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 493, in checkout
    rec = pool._do_get()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/impl.py", line 256, in _do_get
    return self._create_connection()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 273, in _create_connection
    return _ConnectionRecord(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 388, in __init__
    self.__connect()
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 691, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py", line 70, in __exit__
    compat.raise_(
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/pool/base.py", line 686, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/create.py", line 574, in connect
    return dialect.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py", line 598, in connect
    return self.dbapi.connect(*cargs, **cparams)
  File "/home/airflow/.local/lib/python3.8/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name "postgres" to address: Temporary failure in name resolution

(Background on this error at: https://sqlalche.me/e/14/e3q8)
[2024-04-25T14:36:26.781+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-04-25T14:36:42.200+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-04-25T14:37:09.335+0000] {job.py:221} ERROR - Job heartbeat failed with error. Scheduler is in unhealthy state
[2024-04-25T14:37:11.720+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='create_tables' AIRFLOW_CTX_EXECUTION_DATE='2024-04-16T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='2' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-04-16T21:11:00+00:00'
[2024-04-25T14:37:11.764+0000] {sql.py:276} INFO - Executing: CREATE TABLE IF NOT EXISTS MRR_Dim_Customers(
user_ID             varchar(50) null,
country             varchar(50) null,
currency            varchar(50) null,
exchange_to_usd     varchar(50) null,
installation_date   varchar(50) null,
last_seen           varchar(50) null,
media_source        varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS MRR_Dim_Products(
product_ID          varchar(50) null,
product_name        varchar(50) null,
supplier            varchar(50) null,
category            varchar(50) null,
unit_price          varchar(50) null,
unit_cost           varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS  MRR_Fact_Details(
order_ID            varchar(50) null,
product_ID          varchar(50) null,
quantity            varchar(50) null
);

CREATE TABLE IF NOT EXISTS  MRR_Fact_Orders(
order_ID            varchar(50) null,
order_time          varchar(50) null,
customer_ID         varchar(50) null,
coupon_discount     varchar(50) null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Customers(
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
isValid	            varchar(50)	not null,
PRIMARY KEY (user_ID)
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Dates(
date	date	not null,
year	Int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);

CREATE TABLE IF NOT EXISTS STG_Dim_Products(
product_ID	    int	not         null,
product_name	varchar(50)	    not null,
supplier	    int	            not null,
category	    int	            not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
isValid	        varchar(10)	    not null,
PRIMARY KEY (product_ID)
);

CREATE TABLE IF NOT EXISTS STG_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (DateTime )
);


CREATE TABLE IF NOT EXISTS  STG_Fact_Details(
order_ID	int	not null,
product_ID	int	not null,
quantity	int	not null,
PRIMARY KEY (order_ID, product_ID )
);

CREATE TABLE IF NOT EXISTS  STG_Fact_Orders(
order_ID	    int	        not null,
order_time	    timestamp   not null,
customer_ID	    int	        not null,
coupon_discount	decimal(3,2) not null,
PRIMARY KEY (order_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Customers(
DW_customer_ID	    serial	    not null,
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS  DWH_Dim_Dates(
date	date	not null,
year	int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (dateTime )
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_Arch(
DW_customer_ID  int         not null,
customer_ID     int         not null,
startOfMonth    date        not null,
status          varchar(10) not null,
PRIMARY KEY (DW_customer_ID, startOfMonth)
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions(
year	            int	        not null,
quarter	            int	        not null,
month	            int	        not null,
country	            varchar(50)	not null,
count_new_customers	int	        not null,
count_regular	    int	        not null,
count_reactivated	int	        not null,
count_abandons	    int	        not null,
count_total	        int	        not null,
PRIMARY KEY (year, quarter, month, country)
);

--backup

CREATE TABLE IF NOT EXISTS DWH_Dim_Customers_backup(
DW_customer_ID	    serial	    not null,
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products_backup(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order_backup(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);



CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_Arch_backup(
DW_customer_ID  int         not null,
customer_ID     int         not null,
startOfMonth    date        not null,
status          varchar(10) not null,
PRIMARY KEY (DW_customer_ID, startOfMonth)
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_backup(
year	            int	        not null,
quarter	            int	        not null,
month	            int	        not null,
country	            varchar(50)	not null,
count_new_customers	int	        not null,
count_regular	    int	        not null,
count_reactivated	int	        not null,
count_abandons	    int	        not null,
count_total	        int	        not null,
PRIMARY KEY (year, quarter, month, country)
);

[2024-04-25T14:37:11.872+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-25T14:37:11.953+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-04-25T14:37:12.374+0000] {sql.py:457} INFO - Running statement: CREATE TABLE IF NOT EXISTS MRR_Dim_Customers(
user_ID             varchar(50) null,
country             varchar(50) null,
currency            varchar(50) null,
exchange_to_usd     varchar(50) null,
installation_date   varchar(50) null,
last_seen           varchar(50) null,
media_source        varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS MRR_Dim_Products(
product_ID          varchar(50) null,
product_name        varchar(50) null,
supplier            varchar(50) null,
category            varchar(50) null,
unit_price          varchar(50) null,
unit_cost           varchar(50) null,
isValid             varchar(50) not null
);


CREATE TABLE IF NOT EXISTS  MRR_Fact_Details(
order_ID            varchar(50) null,
product_ID          varchar(50) null,
quantity            varchar(50) null
);

CREATE TABLE IF NOT EXISTS  MRR_Fact_Orders(
order_ID            varchar(50) null,
order_time          varchar(50) null,
customer_ID         varchar(50) null,
coupon_discount     varchar(50) null
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Customers(
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
isValid	            varchar(50)	not null,
PRIMARY KEY (user_ID)
);

CREATE TABLE IF NOT EXISTS  STG_Dim_Dates(
date	date	not null,
year	Int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);

CREATE TABLE IF NOT EXISTS STG_Dim_Products(
product_ID	    int	not         null,
product_name	varchar(50)	    not null,
supplier	    int	            not null,
category	    int	            not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
isValid	        varchar(10)	    not null,
PRIMARY KEY (product_ID)
);

CREATE TABLE IF NOT EXISTS STG_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (DateTime )
);


CREATE TABLE IF NOT EXISTS  STG_Fact_Details(
order_ID	int	not null,
product_ID	int	not null,
quantity	int	not null,
PRIMARY KEY (order_ID, product_ID )
);

CREATE TABLE IF NOT EXISTS  STG_Fact_Orders(
order_ID	    int	        not null,
order_time	    timestamp   not null,
customer_ID	    int	        not null,
coupon_discount	decimal(3,2) not null,
PRIMARY KEY (order_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Customers(
DW_customer_ID	    serial	    not null,
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS  DWH_Dim_Dates(
date	date	not null,
year	int	    not null,
quarter	int	    not null,
month	int	    not null,
day	    int	    not null,
PRIMARY KEY (date)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Time(
dateTime	timestamp	not null,
date	    date	    not null,
hour	    Time	    not null,
PRIMARY KEY (dateTime )
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_Arch(
DW_customer_ID  int         not null,
customer_ID     int         not null,
startOfMonth    date        not null,
status          varchar(10) not null,
PRIMARY KEY (DW_customer_ID, startOfMonth)
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions(
year	            int	        not null,
quarter	            int	        not null,
month	            int	        not null,
country	            varchar(50)	not null,
count_new_customers	int	        not null,
count_regular	    int	        not null,
count_reactivated	int	        not null,
count_abandons	    int	        not null,
count_total	        int	        not null,
PRIMARY KEY (year, quarter, month, country)
);

--backup

CREATE TABLE IF NOT EXISTS DWH_Dim_Customers_backup(
DW_customer_ID	    serial	    not null,
user_ID	            int	        not null,
country	            varchar(50)	not null,
currency	        varchar(50)	not null,
exchange_to_usd	    decimal(3,2) not null,
installation_date	date	    not null,
last_seen 	        date	    not null,
media_source	    varchar(50)	not null,
valid_from      	date	    null,
valid_until	        date	    null,
PRIMARY KEY (DW_customer_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Dim_Products_backup(
DW_prdocut_ID	serial	    not null,
product_ID	    int	        not null,
product_name	varchar(50)	not null,
supplier	    int	        not null,
category	    int	        not null,
unit_price	    decimal(15,5)	null,
unit_cost	    decimal(15,5)	null,
valid_from 	    date	        null,
valid_until	    date	        null,
PRIMARY KEY (DW_prdocut_ID)
);


CREATE TABLE IF NOT EXISTS DWH_Fact_Product_In_Order_backup(
order_ID	            int	not null,
DW_product_ID	        int	not null,
DW_customer_ID	        int	not null,
order_time	            timestamp	not null,
quantity	            int	null,
total_price 	        decimal(15,5)	not null,
total_cost	            decimal(15,5)	not null,
incremental_discount    decimal(3,2)	not null,
final_price	            decimal(15,5)	not null,
PRIMARY KEY (Order_ID, DW_Prdocut_ID)
);



CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_Arch_backup(
DW_customer_ID  int         not null,
customer_ID     int         not null,
startOfMonth    date        not null,
status          varchar(10) not null,
PRIMARY KEY (DW_customer_ID, startOfMonth)
);

CREATE TABLE IF NOT EXISTS DWH_Snapshot_Customers_Transactions_backup(
year	            int	        not null,
quarter	            int	        not null,
month	            int	        not null,
country	            varchar(50)	not null,
count_new_customers	int	        not null,
count_regular	    int	        not null,
count_reactivated	int	        not null,
count_abandons	    int	        not null,
count_total	        int	        not null,
PRIMARY KEY (year, quarter, month, country)
);
, parameters: None
[2024-04-25T14:37:12.445+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-04-25T14:37:12.569+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=create_tables, execution_date=20240416T211100, start_date=20240425T143558, end_date=20240425T143712
[2024-04-25T14:37:12.786+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-04-25T14:37:12.949+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-04-25T14:37:21.645+0000] {taskinstance.py:3309} INFO - 1 downstream tasks scheduled from follow-on schedule check
