[2024-05-04T07:08:58.031+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.fact_stg2dwh scheduled__2024-05-02T21:11:00+00:00 [queued]>
[2024-05-04T07:08:58.051+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.fact_stg2dwh scheduled__2024-05-02T21:11:00+00:00 [queued]>
[2024-05-04T07:08:58.052+0000] {taskinstance.py:2193} INFO - Starting attempt 1 of 6
[2024-05-04T07:08:58.083+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): fact_stg2dwh> on 2024-05-02 21:11:00+00:00
[2024-05-04T07:08:58.093+0000] {standard_task_runner.py:60} INFO - Started process 7208 to run task
[2024-05-04T07:08:58.099+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'fact_stg2dwh', 'scheduled__2024-05-02T21:11:00+00:00', '--job-id', '3324', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpqgxo13zn']
[2024-05-04T07:08:58.105+0000] {standard_task_runner.py:88} INFO - Job 3324: Subtask fact_stg2dwh
[2024-05-04T07:08:58.193+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.fact_stg2dwh scheduled__2024-05-02T21:11:00+00:00 [running]> on host 518f7ecc027f
[2024-05-04T07:08:59.174+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='fact_stg2dwh' AIRFLOW_CTX_EXECUTION_DATE='2024-05-02T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-02T21:11:00+00:00'
[2024-05-04T07:08:59.179+0000] {sql.py:276} INFO - Executing: insert into DWH_Fact_Product_In_Order (Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country,currency,exchange_to_usd,installation_date,media_source,
                                      supplier,category,Quantity,total_price_before_discount,Total_Cost, total_price_after_discount)
with cte as (
  select 
  o.order_ID,
  sum(p.unit_price) total_price_before_discount,
  (sum(p.unit_price) * (1-o.coupon_discount)) total_price_after_discount
  from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
  left join DWH_Dim_Products p on d.Product_ID=p.Product_ID
  group by o.order_ID, o.coupon_discount
)
select 
o.Order_ID,
p.DW_product_ID,
c.DW_Customer_ID,
o.Order_Time,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source,
p.supplier,
p.category,
d.Quantity,
(d.Quantity * p.Unit_Price) as Total_Price,
(d.Quantity * p.Unit_Cost) as Total_Cost,
cte.total_price_after_discount * ((d.Quantity * p.Unit_Price)/cte.total_price_before_discount)
from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
join cte on cte.order_ID = o.order_ID
left join DWH_Dim_Customers c on o.Customer_ID=c.Customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
left join DWH_Dim_Products p on d.Product_ID=p.Product_ID --left join in case there is a product that isn't shown in DWH_Dim_products, but was purchased
where p.Valid_Until is null and c.Valid_Until is null 
and (o.Order_ID,p.dw_product_id) not in ( select distinct Order_ID, dw_product_id
                                          from DWH_Fact_Product_In_Order
                                        );

insert into DWH_Fact_Events (event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select 
event_ID,
event_description,
event_time,
c.DW_customer_ID,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source
from STG_Fact_Events e left join DWH_Dim_Customers c on e.customer_ID=c.customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
where c.valid_until is null and event_ID not in (select distinct event_ID 
                                                 from DWH_Fact_Events  
                                                 );                       


[2024-05-04T07:08:59.208+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-04T07:08:59.242+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-05-04T07:08:59.266+0000] {sql.py:457} INFO - Running statement: insert into DWH_Fact_Product_In_Order (Order_ID,DW_product_ID,DW_Customer_ID,Order_Time,country,currency,exchange_to_usd,installation_date,media_source,
                                      supplier,category,Quantity,total_price_before_discount,Total_Cost, total_price_after_discount)
with cte as (
  select 
  o.order_ID,
  sum(p.unit_price) total_price_before_discount,
  (sum(p.unit_price) * (1-o.coupon_discount)) total_price_after_discount
  from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
  left join DWH_Dim_Products p on d.Product_ID=p.Product_ID
  group by o.order_ID, o.coupon_discount
)
select 
o.Order_ID,
p.DW_product_ID,
c.DW_Customer_ID,
o.Order_Time,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source,
p.supplier,
p.category,
d.Quantity,
(d.Quantity * p.Unit_Price) as Total_Price,
(d.Quantity * p.Unit_Cost) as Total_Cost,
cte.total_price_after_discount * ((d.Quantity * p.Unit_Price)/cte.total_price_before_discount)
from STG_Fact_Orders o join STG_Fact_Details d on o.Order_ID=d.Order_ID 
join cte on cte.order_ID = o.order_ID
left join DWH_Dim_Customers c on o.Customer_ID=c.Customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
left join DWH_Dim_Products p on d.Product_ID=p.Product_ID --left join in case there is a product that isn't shown in DWH_Dim_products, but was purchased
where p.Valid_Until is null and c.Valid_Until is null 
and (o.Order_ID,p.dw_product_id) not in ( select distinct Order_ID, dw_product_id
                                          from DWH_Fact_Product_In_Order
                                        );

insert into DWH_Fact_Events (event_ID,event_description,event_time,DW_customer_ID,country,currency,exchange_to_USD,installation_date,media_source)
select 
event_ID,
event_description,
event_time,
c.DW_customer_ID,
c.country,
c.currency,
c.exchange_to_usd,
c.installation_date,
c.media_source
from STG_Fact_Events e left join DWH_Dim_Customers c on e.customer_ID=c.customer_ID --left join in case there is a customer who isn't shown in DWH_Dim_Customers, but he did purchase
where c.valid_until is null and event_ID not in (select distinct event_ID 
                                                 from DWH_Fact_Events  
                                                 );                       

, parameters: None
[2024-05-04T07:08:59.311+0000] {sql.py:466} INFO - Rows affected: 0
[2024-05-04T07:08:59.312+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-05-04T07:08:59.334+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=fact_stg2dwh, execution_date=20240502T211100, start_date=20240504T070858, end_date=20240504T070859
[2024-05-04T07:08:59.399+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-05-04T07:08:59.419+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/models/baseoperator.py:1201: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2024-05-04T07:08:59.446+0000] {taskinstance.py:3309} INFO - 1 downstream tasks scheduled from follow-on schedule check
