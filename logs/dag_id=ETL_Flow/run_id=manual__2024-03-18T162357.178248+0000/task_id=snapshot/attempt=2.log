[2024-03-18T16:28:35.344+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-18T16:23:57.178248+00:00 [queued]>
[2024-03-18T16:28:35.377+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot manual__2024-03-18T16:23:57.178248+00:00 [queued]>
[2024-03-18T16:28:35.380+0000] {taskinstance.py:2193} INFO - Starting attempt 2 of 7
[2024-03-18T16:28:35.424+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-18 16:23:57.178248+00:00
[2024-03-18T16:28:35.437+0000] {standard_task_runner.py:60} INFO - Started process 736 to run task
[2024-03-18T16:28:35.445+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'manual__2024-03-18T16:23:57.178248+00:00', '--job-id', '1807', '--raw', '--subdir', 'DAGS_FOLDER/etl2.py', '--cfg-path', '/tmp/tmpbe3uoo3h']
[2024-03-18T16:28:35.452+0000] {standard_task_runner.py:88} INFO - Job 1807: Subtask snapshot
[2024-03-18T16:28:35.563+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot manual__2024-03-18T16:23:57.178248+00:00 [running]> on host b4ee6ab26675
[2024-03-18T16:28:36.971+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-18T16:23:57.178248+00:00' AIRFLOW_CTX_TRY_NUMBER='2' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-03-18T16:23:57.178248+00:00'
[2024-03-18T16:28:36.987+0000] {sql.py:276} INFO - Executing: DO $$
DECLARE
    EndOfPrevMonth date;
    StartOfPrevMonth date;
    PrevPeriodMonth int;
    PrevPeriodYear int;
    PrevPeriodQuarter int;
BEGIN
    SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day' INTO EndOfPrevMonth;
    SELECT DATE_TRUNC('month', EndOfPrevMonth) INTO StartOfPrevMonth;
    SELECT EXTRACT(MONTH FROM StartOfPrevMonth) INTO PrevPeriodMonth;
    SELECT EXTRACT(YEAR FROM StartOfPrevMonth) INTO PrevPeriodYear;
    SELECT EXTRACT(QUARTER FROM StartOfPrevMonth) INTO PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        StartOfPrevMonth,
        c.DW_Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = PrevPeriodMonth
                    AND MIN(EXTRACT(YEAR FROM valid_from)) = PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                    AND s.StartOfPrevMonth = StartOfPrevMonth - INTERVAL '1 month'
                    AND status ='abandoned' 
            ) AND EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    WHERE c.Valid_Until IS NULL; 

    IF (
        SELECT MAX(s.StartOfPrevMonth) 
        FROM Snapshot_Customers_Transactions_Arch s
    ) < StartOfPrevMonth THEN 

        -- Adding the new records to the archive table - incremental load 
        --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
        INSERT INTO Snapshot_Customers_Transactions_Arch (StartOfMonth, Customer_ID, Status)
        SELECT 
            StartOfPrevMonth,
            DW_Customer_ID,
            Status 
        FROM Snapshot_Customers_Transactions_month t
        WHERE (StartOfPrevMonth, DW_Customer_ID, Status) NOT IN ( 
            SELECT StartOfPrevMonth, DW_Customer_ID, Status
            FROM Snapshot_Customers_Transactions_Arch a
        );

        INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                         Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
        SELECT 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City,
            SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
            SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
            SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
            SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
            COUNT(DISTINCT DW_Customer_ID) Count_Total
        FROM Snapshot_Customers_Transactions_Arch A 
        JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
        GROUP BY 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City;
    ELSE
        RAISE NOTICE 'No records found for archiving.';
    END IF;

END $$;
[2024-03-18T16:28:37.062+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-18T16:28:37.207+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-18T16:28:37.303+0000] {sql.py:457} INFO - Running statement: DO $$
DECLARE
    EndOfPrevMonth date;
    StartOfPrevMonth date;
    PrevPeriodMonth int;
    PrevPeriodYear int;
    PrevPeriodQuarter int;
BEGIN
    SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day' INTO EndOfPrevMonth;
    SELECT DATE_TRUNC('month', EndOfPrevMonth) INTO StartOfPrevMonth;
    SELECT EXTRACT(MONTH FROM StartOfPrevMonth) INTO PrevPeriodMonth;
    SELECT EXTRACT(YEAR FROM StartOfPrevMonth) INTO PrevPeriodYear;
    SELECT EXTRACT(QUARTER FROM StartOfPrevMonth) INTO PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        StartOfPrevMonth,
        c.DW_Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = PrevPeriodMonth
                    AND MIN(EXTRACT(YEAR FROM valid_from)) = PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                    AND s.StartOfPrevMonth = StartOfPrevMonth - INTERVAL '1 month'
                    AND status ='abandoned' 
            ) AND EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    WHERE c.Valid_Until IS NULL; 

    IF (
        SELECT MAX(s.StartOfPrevMonth) 
        FROM Snapshot_Customers_Transactions_Arch s
    ) < StartOfPrevMonth THEN 

        -- Adding the new records to the archive table - incremental load 
        --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
        INSERT INTO Snapshot_Customers_Transactions_Arch (StartOfMonth, Customer_ID, Status)
        SELECT 
            StartOfPrevMonth,
            DW_Customer_ID,
            Status 
        FROM Snapshot_Customers_Transactions_month t
        WHERE (StartOfPrevMonth, DW_Customer_ID, Status) NOT IN ( 
            SELECT StartOfPrevMonth, DW_Customer_ID, Status
            FROM Snapshot_Customers_Transactions_Arch a
        );

        INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                         Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
        SELECT 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City,
            SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
            SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
            SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
            SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
            COUNT(DISTINCT DW_Customer_ID) Count_Total
        FROM Snapshot_Customers_Transactions_Arch A 
        JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
        GROUP BY 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City;
    ELSE
        RAISE NOTICE 'No records found for archiving.';
    END IF;

END $$;, parameters: None
[2024-03-18T16:28:37.358+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.UndefinedColumn: column "startofprevmonth" does not exist
LINE 3:         StartOfPrevMonth,
                ^
QUERY:  CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        StartOfPrevMonth,
        c.DW_Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = PrevPeriodMonth
                    AND MIN(EXTRACT(YEAR FROM valid_from)) = PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                    AND s.StartOfPrevMonth = StartOfPrevMonth - INTERVAL '1 month'
                    AND status ='abandoned' 
            ) AND EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    WHERE c.Valid_Until IS NULL
CONTEXT:  PL/pgSQL function inline_code_block line 15 at SQL statement

[2024-03-18T16:28:37.436+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240318T162357, start_date=20240318T162835, end_date=20240318T162837
[2024-03-18T16:28:37.516+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 1807 for task snapshot (column "startofprevmonth" does not exist
LINE 3:         StartOfPrevMonth,
                ^
QUERY:  CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        StartOfPrevMonth,
        c.DW_Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = PrevPeriodMonth
                    AND MIN(EXTRACT(YEAR FROM valid_from)) = PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                    AND s.StartOfPrevMonth = StartOfPrevMonth - INTERVAL '1 month'
                    AND status ='abandoned' 
            ) AND EXISTS (
                SELECT 1
                FROM DWH_Fact_Product_In_Order p
                WHERE p.Customer_ID = c.Customer_ID 
                    AND EXTRACT(DATE FROM Order_Time) <= EndOfPrevMonth
                    AND EXTRACT(DATE FROM Order_Time) >= StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c
    WHERE c.Valid_Until IS NULL
CONTEXT:  PL/pgSQL function inline_code_block line 15 at SQL statement
; 736)
[2024-03-18T16:28:37.603+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-18T16:28:37.694+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
