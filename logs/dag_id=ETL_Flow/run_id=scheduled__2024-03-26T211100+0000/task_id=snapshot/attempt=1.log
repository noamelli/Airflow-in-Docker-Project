[2024-03-28T17:30:03.430+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-26T21:11:00+00:00 [queued]>
[2024-03-28T17:30:03.453+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-26T21:11:00+00:00 [queued]>
[2024-03-28T17:30:03.455+0000] {taskinstance.py:2193} INFO - Starting attempt 1 of 6
[2024-03-28T17:30:03.490+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-26 21:11:00+00:00
[2024-03-28T17:30:03.505+0000] {standard_task_runner.py:60} INFO - Started process 10136 to run task
[2024-03-28T17:30:03.513+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'scheduled__2024-03-26T21:11:00+00:00', '--job-id', '2341', '--raw', '--subdir', 'DAGS_FOLDER/ETL.py', '--cfg-path', '/tmp/tmpbtl703ni']
[2024-03-28T17:30:03.520+0000] {standard_task_runner.py:88} INFO - Job 2341: Subtask snapshot
[2024-03-28T17:30:03.650+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot scheduled__2024-03-26T21:11:00+00:00 [running]> on host cb216a3a40e5
[2024-03-28T17:30:04.150+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-26T21:11:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-26T21:11:00+00:00'
[2024-03-28T17:30:04.152+0000] {sql.py:276} INFO - Executing: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
        --cross join beacuse the view consists of one record   
   

  DO $$
BEGIN   -- Loading to archive table and snapshot table only the previous month and load once only
IF (SELECT MAX(StartOfMonth) FROM Snapshot_Customers_Transactions_Arch) <
   (SELECT StartOfPrevMonth FROM current_dates) 

THEN
        -- Adding the new records to the archive table - incremental loading
    INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
    SELECT 
        Customer_ID,
        StartOfPrevMonth,
        Status 
    FROM Snapshot_Customers_Transactions_month t
    WHERE (Customer_ID,StartOfPrevMonth,Status) NOT IN (SELECT Customer_ID,StartOfPrevMonth,Status FROM Snapshot_Customers_Transactions_Arch);
    
    
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City,
    SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
    COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (EXTRACT (year from StartOfMonth),EXTRACT (Quarter from StartOfMonth),EXTRACT (month from StartOfMonth),C.Country, C.City) 
    NOT IN (select distinct Year,Quarter,month,Country, City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City;
ELSE
    RAISE NOTICE 'No records found for archiving.';
END IF;
END $$;
[2024-03-28T17:30:04.175+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-28T17:30:04.199+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-28T17:30:04.240+0000] {sql.py:457} INFO - Running statement: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
        --cross join beacuse the view consists of one record   
   

  DO $$
BEGIN   -- Loading to archive table and snapshot table only the previous month and load once only
IF (SELECT MAX(StartOfMonth) FROM Snapshot_Customers_Transactions_Arch) <
   (SELECT StartOfPrevMonth FROM current_dates) 

THEN
        -- Adding the new records to the archive table - incremental loading
    INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
    SELECT 
        Customer_ID,
        StartOfPrevMonth,
        Status 
    FROM Snapshot_Customers_Transactions_month t
    WHERE (Customer_ID,StartOfPrevMonth,Status) NOT IN (SELECT Customer_ID,StartOfPrevMonth,Status FROM Snapshot_Customers_Transactions_Arch);
    
    
    INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                     Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
    SELECT 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City,
    SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END),
    SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END),
    COUNT(DISTINCT DW_Customer_ID) 
    FROM Snapshot_Customers_Transactions_Arch A JOIN DWH_Dim_Customers C 
    ON A.Customer_ID=C.Customer_ID
    WHERE (EXTRACT (year from StartOfMonth),EXTRACT (Quarter from StartOfMonth),EXTRACT (month from StartOfMonth),C.Country, C.City) 
    NOT IN (select distinct Year,Quarter,month,Country, City FROM DWH_Snapshot_Customers_Transactions)
    GROUP BY 
    EXTRACT (year from StartOfMonth),
    EXTRACT (Quarter from StartOfMonth),
    EXTRACT (month from StartOfMonth),
    C.Country, 
    C.City;
ELSE
    RAISE NOTICE 'No records found for archiving.';
END IF;
END $$;, parameters: None
[2024-03-28T17:30:04.329+0000] {warnings.py:109} WARNING - /home/***/.local/lib/python3.8/site-packages/***/providers/common/sql/hooks/sql.py:407: AirflowProviderDeprecationWarning: Call to deprecated method _make_common_data_structure. (The `_make_serializable` method is deprecated and support will be removed in a future version of the common.sql provider. Please update the DbApiHook's provider to a version based on common.sql >= 1.9.1.)
  result = self._make_common_data_structure(handler(cur))

[2024-03-28T17:30:04.362+0000] {taskinstance.py:1149} INFO - Marking task as SUCCESS. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240326T211100, start_date=20240328T173003, end_date=20240328T173004
[2024-03-28T17:30:04.452+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-03-28T17:30:04.495+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
