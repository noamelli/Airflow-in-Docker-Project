[2024-03-19T18:50:05.496+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-18T06:00:00+00:00 [queued]>
[2024-03-19T18:50:05.520+0000] {taskinstance.py:1979} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ETL_Flow.snapshot scheduled__2024-03-18T06:00:00+00:00 [queued]>
[2024-03-19T18:50:05.521+0000] {taskinstance.py:2193} INFO - Starting attempt 4 of 6
[2024-03-19T18:50:05.555+0000] {taskinstance.py:2214} INFO - Executing <Task(PostgresOperator): snapshot> on 2024-03-18 06:00:00+00:00
[2024-03-19T18:50:05.566+0000] {standard_task_runner.py:60} INFO - Started process 659 to run task
[2024-03-19T18:50:05.573+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'ETL_Flow', 'snapshot', 'scheduled__2024-03-18T06:00:00+00:00', '--job-id', '1940', '--raw', '--subdir', 'DAGS_FOLDER/etl2.py', '--cfg-path', '/tmp/tmpaoadahs8']
[2024-03-19T18:50:05.580+0000] {standard_task_runner.py:88} INFO - Job 1940: Subtask snapshot
[2024-03-19T18:50:05.706+0000] {task_command.py:423} INFO - Running <TaskInstance: ETL_Flow.snapshot scheduled__2024-03-18T06:00:00+00:00 [running]> on host 315dde19fa59
[2024-03-19T18:50:06.227+0000] {taskinstance.py:2510} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='coder2j' AIRFLOW_CTX_DAG_ID='ETL_Flow' AIRFLOW_CTX_TASK_ID='snapshot' AIRFLOW_CTX_EXECUTION_DATE='2024-03-18T06:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='4' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-03-18T06:00:00+00:00'
[2024-03-19T18:50:06.230+0000] {sql.py:276} INFO - Executing: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

--cross join is fine beacuse the view consists of one record- the crrent date 
    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
    
-- null cause we dont care about not null they belong to prev months 

    IF (SELECT MAX(s.StartOfMonth) 
        FROM Snapshot_Customers_Transactions_Arch s) 
         < 
        (SELECT StartOfPrevMonth
        FROM Dates
        ) 
        
        THEN 

        -- Adding the new records to the archive table - incremental load 
        --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
        INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
        SELECT 
            Customer_ID,
            StartOfPrevMonth,
            Status 
        FROM Snapshot_Customers_Transactions_month t
        WHERE (StartOfPrevMonth, Customer_ID, Status) NOT IN ( 
            SELECT StartOfPrevMonth, Customer_ID, Status
            FROM Snapshot_Customers_Transactions_Arch a
        );

        INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                         Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
        SELECT 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City,
            SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
            SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
            SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
            SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
            COUNT(DISTINCT DW_Customer_ID) Count_Total
        FROM Snapshot_Customers_Transactions_Arch A 
        JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
        GROUP BY 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City;
    ELSE
        RAISE NOTICE 'No records found for archiving.';
    END IF;


[2024-03-19T18:50:06.251+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-19T18:50:06.270+0000] {base.py:83} INFO - Using connection ID 'postgres_localhost' for task execution.
[2024-03-19T18:50:06.304+0000] {sql.py:457} INFO - Running statement: 
CREATE OR REPLACE VIEW current_dates AS 
SELECT 
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH')::DATE AS StartOfPrevMonth,
(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 DAY')::DATE AS EndOfPrevMonth,
EXTRACT(MONTH FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodMonth,
EXTRACT(YEAR FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodYear,
EXTRACT(QUARTER FROM DATE_TRUNC('month', (SELECT DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))) AS PrevPeriodQuarter;

--cross join is fine beacuse the view consists of one record- the crrent date 
    CREATE OR REPLACE VIEW Snapshot_Customers_Transactions_month AS
    SELECT DISTINCT 
        cd.StartOfPrevMonth,
        c.Customer_ID,
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers u
                WHERE u.Customer_ID = c.Customer_ID
                GROUP BY u.Customer_ID
                HAVING MIN(EXTRACT(MONTH FROM valid_from)) = cd.PrevPeriodMonth
                AND MIN(EXTRACT(YEAR FROM valid_from)) = cd.PrevPeriodYear
            ) THEN 'new'
            WHEN NOT EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID =t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= EndOfPrevMonth
                AND DATE(Order_Time) >= StartOfPrevMonth - INTERVAL '2 month'
            ) THEN 'abandoned'
            WHEN EXISTS (
                SELECT 1
                FROM Snapshot_Customers_Transactions_Arch s
                WHERE s.Customer_ID = c.Customer_ID 
                AND s.StartOfMonth = DATE(cd.StartOfPrevMonth) - INTERVAL '1 month'
                AND status ='abandoned' 
            ) 
             AND EXISTS (
                SELECT 1
                FROM DWH_Dim_Customers t join DWH_Fact_Product_In_Order p
                ON p.DW_Customer_ID = t.DW_Customer_ID
                WHERE t.Customer_ID = c.Customer_ID 
                AND DATE(Order_Time) <= cd.EndOfPrevMonth
                AND DATE(Order_Time) >= cd.StartOfPrevMonth
            ) THEN 'reactivated' 
            ELSE 'regular' 
        END AS Status
    FROM DWH_Dim_Customers c 
    CROSS JOIN current_dates cd; 
    
-- null cause we dont care about not null they belong to prev months 

    IF (SELECT MAX(s.StartOfMonth) 
        FROM Snapshot_Customers_Transactions_Arch s) 
         < 
        (SELECT StartOfPrevMonth
        FROM Dates
        ) 
        
        THEN 

        -- Adding the new records to the archive table - incremental load 
        --כל פעם נטען לטבלת ארכיון ולטבלת סנאפשוט רק את החודש הקודם ונטען פעם אחת בלבד 
        INSERT INTO Snapshot_Customers_Transactions_Arch (Customer_ID, StartOfMonth, Status)
        SELECT 
            Customer_ID,
            StartOfPrevMonth,
            Status 
        FROM Snapshot_Customers_Transactions_month t
        WHERE (StartOfPrevMonth, Customer_ID, Status) NOT IN ( 
            SELECT StartOfPrevMonth, Customer_ID, Status
            FROM Snapshot_Customers_Transactions_Arch a
        );

        INSERT INTO DWH_Snapshot_Customers_Transactions (Year, Quarter, Month, Country, City, Count_New_Customers,
                                                         Count_Regular, Count_Reactivated, Count_Abandons, Count_Total)
        SELECT 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City,
            SUM(CASE WHEN A.Status='new' THEN 1 ELSE 0 END) Count_New_Customers,
            SUM(CASE WHEN A.Status='regular' THEN 1 ELSE 0 END) Count_Regular,
            SUM(CASE WHEN A.Status='reactivated' THEN 1 ELSE 0 END) Count_Reactivated,
            SUM(CASE WHEN A.Status='abandoned' THEN 1 ELSE 0 END) Count_Abandons,
            COUNT(DISTINCT DW_Customer_ID) Count_Total
        FROM Snapshot_Customers_Transactions_Arch A 
        JOIN DWH_Dim_Customers C ON A.DW_Customer_ID=C.DW_Customer_ID
        GROUP BY 
            PrevPeriodYear,
            PrevPeriodQuarter,
            PrevPeriodMonth,
            C.Country, 
            C.City;
    ELSE
        RAISE NOTICE 'No records found for archiving.';
    END IF;

, parameters: None
[2024-03-19T18:50:06.316+0000] {taskinstance.py:2728} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 444, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 414, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 282, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 404, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 462, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.SyntaxError: syntax error at or near "IF"
LINE 54:     IF (SELECT MAX(s.StartOfMonth) 
             ^

[2024-03-19T18:50:06.355+0000] {taskinstance.py:1149} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_Flow, task_id=snapshot, execution_date=20240318T060000, start_date=20240319T185005, end_date=20240319T185006
[2024-03-19T18:50:06.403+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 1940 for task snapshot (syntax error at or near "IF"
LINE 54:     IF (SELECT MAX(s.StartOfMonth) 
             ^
; 659)
[2024-03-19T18:50:06.432+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2024-03-19T18:50:06.468+0000] {taskinstance.py:3309} INFO - 0 downstream tasks scheduled from follow-on schedule check
